<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown学习笔记</title>
    <url>/2020/04/01/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><blockquote>
<pre><code># 一级标题  
## 二级标题  
### 三级标题  
#### 四级标题  
##### 五级标题  
###### 六级标题  </code></pre><p>效果如下：</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><a id="more"></a>
<h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<h2 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h2><blockquote>
<p>段落的换行是使用两个以上空格加上回车。  </p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p>
<blockquote>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：</p>
<pre><code>* 第一项
+ 第二项
- 第三项</code></pre><p>显示效果如下：</p>
<ul>
<li>第一项</li>
</ul>
<ul>
<li>第二项</li>
</ul>
<ul>
<li>第三项</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表使用数字并加上 . 号（注意点后空格）来表示，如：</p>
<pre><code>1. 第一项
2. 第二项
3. 第三项</code></pre><p>显示效果如下：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项  </li>
</ol>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项添加四个空格或一个Tab即可：</p>
<pre><code>1. 第一项：  
     - 第一项嵌套的第一个元素  
     - 第一项嵌套的第二个元素  
 1. 第二项：  
     - 第二项嵌套的第一个元素  
     - 第二项嵌套的第二个元素  </code></pre><p>显示结果如下：</p>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><blockquote>
<p>区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：  </p>
<pre><code>&gt; 区块引用  
&gt; 菜鸟教程  
&gt; 学的不仅是技术更是梦想  </code></pre><p>显示结果如下:  </p>
<blockquote>
<p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想  </p>
</blockquote>
<p>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：</p>
<pre><code>&gt; 最外层
&gt; 第一层嵌套
&gt; &gt; 第二层嵌套</code></pre><p>显示结果如下：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote>
<p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如:   </p>
<p><code>printf()</code> 函数</p>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 4 个空格或者一个制表符（Tab 键）。</p>
<pre><code>float i = 0.1f;
float j = 0.2f;
float k = i + j;
System.out.println(k == 0.3)</code></pre><p>显示结果同上。 </p>
<p>也可以用 ``` 包裹一段代码（注意前后不要有空格），并指定一种语言（也可以不指定）：  </p>
</blockquote>
<img src="/2020/04/01/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/code310X160.png" class="" title="code weight:">

<blockquote>
<p>显示结果同上。 </p>
</blockquote>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><blockquote>
<pre><code>[链接名称](链接地址)

或者

&lt;链接地址&gt;</code></pre><p>例如：</p>
<pre><code>这是一个链接 [我的主页](https://yastone.github.io)</code></pre><p>显示结果如下：  </p>
<p>这是一个链接 <a href="https://yastone.github.io">我的主页</a></p>
<p>直接使用链接地址：</p>
<pre><code>&lt;https://yastone.github.io&gt;  </code></pre><p>显示结果如下： </p>
<p><a href="https://yastone.github.io">https://yastone.github.io</a>    </p>
<h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><pre><code>这个链接用 1 作为网址变量 [Google][1]
这个链接用 2 作为网址变量 [Me][2]
然后在文档的结尾为变量赋值（网址）

  [1]: http://www.google.com/
  [2]: https://yastone.github.io</code></pre><p>显示结果如下： </p>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">Google</a><br>这个链接用 2 作为网址变量 <a href="https://yastone.github.io">Me</a>  </p>
</blockquote>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><blockquote>
<p>Markdown 图片语法格式如下：</p>
<pre><code>![alt 属性文本](图片地址)  

![alt 属性文本](图片地址 &quot;可选标题&quot;)</code></pre><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的  <code>&lt;img&gt;</code>标签。</p>
<pre><code>&lt;img src=&quot;www.baidu.com/baidu.png&quot; width=&quot;50%&quot;&gt;</code></pre></blockquote>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><blockquote>
<p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p>
<ul>
<li><p>语法格式如下：</p>
<pre><code>|  表头   | 表头  |
|  ----  | ----  |
| 单元格  | 单元格 |
| 单元格  | 单元格 |</code></pre></li>
<li><p>以上代码显示结果如下：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><p>我们可以设置表格的对齐方式：</p>
<ul>
<li><p>-: 设置内容和标题栏居右对齐。</p>
</li>
<li><p>:- 设置内容和标题栏居左对齐。</p>
</li>
<li><p>:-: 设置内容和标题栏居中对齐。</p>
<pre><code>| 左对齐 | 右对齐 | 居中对齐 |
| :-----| ----: | :----: |
| 单元格 | 单元格 | 单元格 |
| 单元格 | 单元格 | 单元格 |</code></pre></li>
</ul>
<p>以上代码显示结果如下：</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
</blockquote>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（七）：多表查询之多对多</title>
    <url>/2020/04/18/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%B9%8B%E5%A4%9A%E5%AF%B9%E5%A4%9A/</url>
    <content><![CDATA[<h2 id="实现Role到User多对多"><a href="#实现Role到User多对多" class="headerlink" title="实现Role到User多对多"></a>实现Role到User多对多</h2><p>通过前面的学习，我们使用Mybatis实现一对多关系的维护。  </p>
<p>多对多关系其实我们看成是双向的一对多关系。  </p>
<h3 id="1-用户与角色的关系模型"><a href="#1-用户与角色的关系模型" class="headerlink" title="1. 用户与角色的关系模型"></a>1. 用户与角色的关系模型</h3><p>用户与角色的多对多关系模型如下： </p>
<img src="/2020/04/18/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%B9%8B%E5%A4%9A%E5%AF%B9%E5%A4%9A/ManyToMany.png" class="" title="ManyToMany">

<p>在MySQL数据库中添加角色表，用户角色的中间表。 </p>
<p>角色表 : </p>
<img src="/2020/04/18/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%B9%8B%E5%A4%9A%E5%AF%B9%E5%A4%9A/role.png" class="" title="role">

<p>用户角色中间表：</p>
<img src="/2020/04/18/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%B9%8B%E5%A4%9A%E5%AF%B9%E5%A4%9A/UserRole.png" class="" title="UserRole">

<a id="more"></a>

<h3 id="2-业务要求及实现SQL"><a href="#2-业务要求及实现SQL" class="headerlink" title="2. 业务要求及实现SQL"></a>2. 业务要求及实现SQL</h3><ul>
<li><p>需求:<br>实现查询所有对象并且加载它所分配的用户信息。</p>
</li>
<li><p>分析：<br>查询角色我们需要用到Role表，但角色分配的用户的信息我们并不能直接找到用户信息，而是要通过中间表(USER_ROLE表)才能关联到用户信息。 </p>
</li>
</ul>
<p>下面是实现的SQL语句： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> r.ID <span class="keyword">as</span> rid,role_desc,r.role_name,u.* <span class="keyword">from</span> <span class="keyword">user</span> u</span><br><span class="line">         <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> user_role ur <span class="keyword">on</span> u.id = ur.uid</span><br><span class="line">         <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="keyword">role</span> r <span class="keyword">on</span> r.id = ur.rid;</span><br></pre></td></tr></table></figure>
<p>SQL语句实现不唯一</p>
<h3 id="3-编写角色实体类"><a href="#3-编写角色实体类" class="headerlink" title="3. 编写角色实体类"></a>3. 编写角色实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多的关系映射，一个角色可以赋予多个用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面请自行生成getter和setter以及toString方法。</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-编写Role持久层接口"><a href="#4-编写Role持久层接口" class="headerlink" title="4. 编写Role持久层接口"></a>4. 编写Role持久层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleDaoI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findAllWithUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-编写映射文件"><a href="#5-编写映射文件" class="headerlink" title="5. 编写映射文件"></a>5. 编写映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.RoleDaoI"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义role表的ResultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"roleUsersMap"</span> <span class="attr">type</span>=<span class="string">"domain.Role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"rid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span> <span class="attr">column</span>=<span class="string">"role_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collection是用于建立一对多中集合属性的对应关系   ofType用于指定集合元素的数据类型   --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"userList"</span> <span class="attr">ofType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userAddress"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有Role和与其关联的Users --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllWithUsers"</span> <span class="attr">resultMap</span>=<span class="string">"roleUsersMap"</span>&gt;</span></span><br><span class="line">        select r.ID as rid,role_desc,r.role_name,u.* from user u</span><br><span class="line">         right outer join user_role ur on u.id = ur.uid</span><br><span class="line">         left outer join role r on r.id = ur.rid;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>collection: 定义了用户关联的账户信息。表示关联查询结果集  </p>
</li>
<li><p>property=”accList” ：关联查询的结果集存储在 User 对象的上哪个属性。 </p>
</li>
<li><p>ofType=”account” ：指定关联查询的结果集中的对象类型即List中的对象类型。此处可以使用别名，也可以使用全限定名。 </p>
</li>
</ul>
<h3 id="6-编写测试类"><a href="#6-编写测试类" class="headerlink" title="6. 编写测试类"></a>6. 编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> RoleDaoI roleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SQLMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        roleDao = sqlSession.getMapper(RoleDaoI<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span> <span class="comment">//用于在测试方法执行后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Role&gt; roles = roleDao.findAllWithUsers();</span><br><span class="line">        <span class="keyword">for</span>(Role role : roles)&#123;</span><br><span class="line">            out.println(<span class="string">"-------------------------------------------"</span>);</span><br><span class="line">            out.println(role);</span><br><span class="line">            out.println(role.getUserList());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现User到Role的多对多"><a href="#实现User到Role的多对多" class="headerlink" title="实现User到Role的多对多"></a>实现User到Role的多对多</h2><p>其与前面相似，故在此不做过多赘述。</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（一）：框架概述及快速入门</title>
    <url>/2020/04/03/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="MyBatis-框架概述"><a href="#MyBatis-框架概述" class="headerlink" title="MyBatis 框架概述"></a>MyBatis 框架概述</h2><p>Mybatis是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。 mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由Mybatis框架执行 sql 并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节，使我们不用与jdbc api打交道，就可以完成对数据库的持久化操作。</p>
<h2 id="Mybatis-框架快速入门"><a href="#Mybatis-框架快速入门" class="headerlink" title="Mybatis 框架快速入门"></a>Mybatis 框架快速入门</h2><a id="more"></a>

<h3 id="通过IDEA创建Maven工程"><a href="#通过IDEA创建Maven工程" class="headerlink" title="通过IDEA创建Maven工程"></a>通过IDEA创建Maven工程</h3><img src="/2020/04/03/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/new_project.png" class="" title="new_projectn">

<h3 id="在pom-xml文件中添加以下信息"><a href="#在pom-xml文件中添加以下信息" class="headerlink" title="在pom.xml文件中添加以下信息"></a>在pom.xml文件中添加以下信息</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>  <span class="comment">&lt;!-- 重要 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;  </span><br><span class="line">    <span class="keyword">private</span> String username;  </span><br><span class="line">    <span class="keyword">private</span> Date birthday;  </span><br><span class="line">    <span class="keyword">private</span> String sex;  </span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面请自行自动生成get和set以及toString方法</span></span><br></pre></td></tr></table></figure>

<h3 id="编写持久层接口IUserDao"><a href="#编写持久层接口IUserDao" class="headerlink" title="编写持久层接口IUserDao"></a>编写持久层接口IUserDao</h3><p>IUserDao 接口就是我们的持久层接口（也可以写成UserDao或者UserMapper）,具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;    </span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写持久层接口的映射文件-IUserDao-xml"><a href="#编写持久层接口的映射文件-IUserDao-xml" class="headerlink" title="编写持久层接口的映射文件 IUserDao.xml"></a>编写持久层接口的映射文件 IUserDao.xml</h3><p><strong>要求</strong>：<br>    <strong>创建位置：必须和持久层接口在相同的包中。</strong><br>    <strong>名称：必须以持久层接口名称命名文件名，扩展名是.xml</strong> </p>
<img src="/2020/04/03/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/directory.png" class="" title="directory">  

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="编写SqlMapConfig-xml配置文件"><a href="#编写SqlMapConfig-xml配置文件" class="headerlink" title="编写SqlMapConfig.xml配置文件"></a>编写SqlMapConfig.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_db?characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"dao/IUserDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SQLMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder()   ;</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span> <span class="comment">//用于在测试方法执行后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;  <span class="comment">//测试查询所有方法  </span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            out.println(<span class="string">"-------------------------------------------"</span>);</span><br><span class="line">            out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后整个项目结构如下：</p>
<img src="/2020/04/03/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/structure.png" class="" title="structure">

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ol>
<li>新建一个名为mybatis_db的数据库</li>
<li>导入以下数据  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名称'</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生日'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`username`</span>,<span class="string">`birthday`</span>,<span class="string">`sex`</span>,<span class="string">`address`</span>) <span class="keyword">values</span>  (<span class="number">41</span>,<span class="string">'老王'</span>,<span class="string">'2018-02-27 17:47:08'</span>,<span class="string">'男'</span>,<span class="string">'北京'</span>),(<span class="number">42</span>,<span class="string">'小二王'</span>,<span class="string">'2018-03-02   15:09:37'</span>,<span class="string">'女'</span>,<span class="string">'北京金燕龙'</span>),(<span class="number">43</span>,<span class="string">'小二王'</span>,<span class="string">'2018-03-04 11:34:34'</span>,<span class="string">'女'</span>,<span class="string">'北京    金燕龙'</span>),(<span class="number">45</span>,<span class="string">'传智播客'</span>,<span class="string">'2018-03-04 12:04:06'</span>,<span class="string">'男'</span>,<span class="string">'北京金燕龙'</span>),(<span class="number">46</span>,<span class="string">'老王  '</span>,<span class="string">'2018-03-07 17:37:26'</span>,<span class="string">'男'</span>,<span class="string">'北京'</span>),(<span class="number">48</span>,<span class="string">'小马宝莉'</span>,<span class="string">'2018-03-08   11:44:00'</span>,<span class="string">'女'</span>,<span class="string">'北京修正'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`account`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account`</span> (</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'编号'</span>,</span><br><span class="line">  <span class="string">`UID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户编号'</span>,</span><br><span class="line">  <span class="string">`MONEY`</span> <span class="keyword">double</span> <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'金额'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`ID`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_Reference_8`</span> (<span class="string">`UID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_Reference_8`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`UID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span>     (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`account`</span>(<span class="string">`ID`</span>,<span class="string">`UID`</span>,<span class="string">`MONEY`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">41</span>,<span class="number">1000</span>),(<span class="number">2</span>,<span class="number">45</span>,<span class="number">1000</span>)   ,(<span class="number">3</span>,<span class="number">41</span>,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`role`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`role`</span> (</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'编号'</span>,</span><br><span class="line">  <span class="string">`ROLE_NAME`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色名称'</span>,</span><br><span class="line">  <span class="string">`ROLE_DESC`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色描述'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`ID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`role`</span>(<span class="string">`ID`</span>,<span class="string">`ROLE_NAME`</span>,<span class="string">`ROLE_DESC`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'院长'</span>,<span class="string">'管理    整个学院'</span>),(<span class="number">2</span>,<span class="string">'总裁'</span>,<span class="string">'管理整个公司'</span>),(<span class="number">3</span>,<span class="string">'校长'</span>,<span class="string">'管理整个学校'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user_role`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_role`</span> (</span><br><span class="line">  <span class="string">`UID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户编号'</span>,</span><br><span class="line">  <span class="string">`RID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色编号'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`UID`</span>,<span class="string">`RID`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_Reference_10`</span> (<span class="string">`RID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_Reference_10`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`RID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`role`</span>    (<span class="string">`ID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_Reference_9`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`UID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span>     (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user_role`</span>(<span class="string">`UID`</span>,<span class="string">`RID`</span>) <span class="keyword">values</span> (<span class="number">41</span>,<span class="number">1</span>),(<span class="number">45</span>,<span class="number">1</span>),(<span class="number">41</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="运行测试类及结果"><a href="#运行测试类及结果" class="headerlink" title="运行测试类及结果"></a>运行测试类及结果</h3><img src="/2020/04/03/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/result.png" class="" title="result">  

<h3 id="基于注解的Mybatis使用"><a href="#基于注解的Mybatis使用" class="headerlink" title="基于注解的Mybatis使用"></a>基于注解的Mybatis使用</h3><ol>
<li><p>在持久层接口中添加注解  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改SqlMapConfig.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"dao.IUserDao"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除映射配置文件IUserDao.xml</p>
</li>
</ol>
<p>测试结果同上  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Mybatis环境搭建步骤：</p>
<ul>
<li>第一步：创建maven工程  </li>
<li>第二步：导入坐标  </li>
<li>第三步：编写必要代码（实体类和持久层接口） </li>
<li>第四步：编写SqlMapConfig.xml  </li>
<li>第五步：编写映射配置文件 </li>
<li>第六步：编写测试类  </li>
</ul>
<h2 id="学习笔记源码"><a href="#学习笔记源码" class="headerlink" title="学习笔记源码"></a>学习笔记源码</h2><p>如果需要整个系列笔记的源码，请访问<a href="https://github.com/Yastone/yastone.github.io/releases/tag/Mybatis" target="_blank" rel="noopener">https://github.com/Yastone/yastone.github.io/releases/tag/Mybatis</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（三）：输出结果的封装与resultMap的使用</title>
    <url>/2020/04/06/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="resultType配置结果类型"><a href="#resultType配置结果类型" class="headerlink" title="resultType配置结果类型"></a>resultType配置结果类型</h2><p>resultType属性可以指定结果集的类型，它支持基本类型和实体类类型。 </p>
<p>我们在前面的CRUD案例中已经对此属性进行过应用了。  </p>
<p>需要注意的是，它和parameterType一样，如果注册过类型别名的，可以直接使用别名。没有注册过的必须 使用全限定类名。例如：我们的实体类此时必须是全限定类名（今天最后一个章节会讲解如何配置实体类的别名）  </p>
<p>同时，当是实体类名称时，还有一个要求，<strong>实体类中的属性名称必须和查询语句中的列名保持一致，否则无法实现封装。</strong>  </p>
<p>然而开发过程中总有一些特殊情况，当实体类中的属性名与数据库列名不一致时，该如何处理？答案是利用<code>resultMap</code>结果类型。</p>
<a id="more"></a>

<h2 id="特殊情况示例："><a href="#特殊情况示例：" class="headerlink" title="特殊情况示例："></a>特殊情况示例：</h2><h3 id="修改实体类"><a href="#修改实体类" class="headerlink" title="修改实体类"></a>修改实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面请自行生成getter和setter以及toString方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="映射配置"><a href="#映射配置" class="headerlink" title="映射配置"></a>映射配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.IUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 查询结果的列名和实体类的属性名的对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主键字段的对应 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非主键字段的对应--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userAddress"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">            select last_insert_id();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(username,address,sex,birthday) values(#&#123;userName&#125;,#&#123;userAddress&#125;,#&#123;userSex&#125;,#&#123;userBirthday&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125;,address=#&#123;userAddress&#125;,sex=#&#123;userSex&#125;,birthday=#&#123;userBirthday&#125; where id=#&#123;userId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 删除用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select * from user where username like #&#123;userName&#125;;</span><br><span class="line">        <span class="comment">&lt;!--select * from user where username like '%$&#123;value&#125;%';--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 获取用户的总记录条数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotal"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select count(id) from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试查询结果"><a href="#测试查询结果" class="headerlink" title="测试查询结果"></a>测试查询结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">        out.println(<span class="string">"-------------------------------------------"</span>);</span><br><span class="line">        out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（九）：Mybatis缓存</title>
    <url>/2020/04/25/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9AMybatis%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>像大多数的持久化框架一样，Mybatis也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提高性能。  </p>
<p>Mybatis 中缓存分为一级缓存，二级缓存。</p>
<h2 id="Mybatis一级缓存"><a href="#Mybatis一级缓存" class="headerlink" title="Mybatis一级缓存"></a>Mybatis一级缓存</h2><h3 id="1-证明一级缓存的存在"><a href="#1-证明一级缓存的存在" class="headerlink" title="1. 证明一级缓存的存在"></a>1. 证明一级缓存的存在</h3><p>一级缓存是SqlSession级别的缓存，只要SqlSession没有flush或close，它就存在。 </p>
<a id="more"></a>

<p>编写测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span> <span class="comment">//用于在测试方法执行后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user1 = userDao.findById(<span class="number">50</span>);</span><br><span class="line">        User user2 = userDao.findById(<span class="number">50</span>);</span><br><span class="line">        out.println(<span class="string">"I am user1:"</span>+user1.hashCode());</span><br><span class="line">        out.println(<span class="string">"I am user2:"</span>+user2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<img src="/2020/04/25/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9AMybatis%E7%BC%93%E5%AD%98/L1Cache.png" class="" title="L1Cache.png">

<h3 id="2-一级缓存的分析"><a href="#2-一级缓存的分析" class="headerlink" title="2. 一级缓存的分析"></a>2. 一级缓存的分析</h3><p>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。  </p>
<p>第一次发起查询用户 id 为 50 的用户信息，先去找缓存中是否有 id 为 50 的用户信息，如果没有，从数据库查询用户信息。  </p>
<p>得到用户信息，将用户信息存储到一级缓存中。  </p>
<p>如果 sqlSession 去执行 commit 操作（执行插入、更新、删除），就清空 SqlSession 中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。第二次发起查询用户 id 为 50 的用户信息，先去找缓存中是否有 id 为 50 的用户信息，缓存中有，直接从缓存中获取用户信息。</p>
<img src="/2020/04/25/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9AMybatis%E7%BC%93%E5%AD%98/L1CacheFigure.png" class="" title="L1CacheFigure">

<h3 id="3-测试一级缓存的清空"><a href="#3-测试一级缓存的清空" class="headerlink" title="3. 测试一级缓存的清空"></a>3. 测试一级缓存的清空</h3><p>修改测试类： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user1 = userDao.findById(<span class="number">50</span>);</span><br><span class="line">    sqlSession.clearCache();<span class="comment">//此方法也可以清空缓存</span></span><br><span class="line">    userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = userDao.findById(<span class="number">50</span>);</span><br><span class="line">    out.println(<span class="string">"I am user1:"</span>+user1.hashCode());</span><br><span class="line">    out.println(<span class="string">"I am user2:"</span>+user2.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/04/25/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9AMybatis%E7%BC%93%E5%AD%98/clearL1.png" class="" title="clearL1">

<h2 id="Mybatis二级缓存"><a href="#Mybatis二级缓存" class="headerlink" title="Mybatis二级缓存"></a>Mybatis二级缓存</h2><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。 </p>
<h3 id="二级缓存结构图"><a href="#二级缓存结构图" class="headerlink" title="二级缓存结构图"></a>二级缓存结构图</h3><img src="/2020/04/25/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9AMybatis%E7%BC%93%E5%AD%98/L2Cache.png" class="" title="L2Cache">  

<p>首先开启 mybatis 的二级缓存。 </p>
<p>sqlSession1 去查询用户信息，查询到用户信息会将查询数据存储到二级缓存中。 </p>
<p>如果 SqlSession3 去执行相同 mapper 映射下 sql，执行 commit 提交，将会清空该 mapper 映射下的二 级缓存区域的数据。   </p>
<p>sqlSession2 去查询与 sqlSession1 相同的用户信息，首先会去缓存中找是否存在数据，如果存在直接从缓存中取出数据。</p>
<h3 id="二级缓存的开启与关闭"><a href="#二级缓存的开启与关闭" class="headerlink" title="二级缓存的开启与关闭"></a>二级缓存的开启与关闭</h3><h4 id="1-在-SqlMapConfig-xml-文件开启二级缓存"><a href="#1-在-SqlMapConfig-xml-文件开启二级缓存" class="headerlink" title="1. 在 SqlMapConfig.xml 文件开启二级缓存"></a>1. 在 SqlMapConfig.xml 文件开启二级缓存</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。<br>为 true 代表开启二级缓存；为 false 代表不开启二级缓存。 </p>
<h4 id="2-配置相关的-Mapper-映射文件"><a href="#2-配置相关的-Mapper-映射文件" class="headerlink" title="2. 配置相关的 Mapper 映射文件"></a>2. 配置相关的 Mapper 映射文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>     </span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>     </span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.IUserDao"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;cache&gt;</code>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。 </p>
<h4 id="3-配置-statement-上面的-useCache-属性"><a href="#3-配置-statement-上面的-useCache-属性" class="headerlink" title="3. 配置 statement 上面的 useCache 属性"></a>3. 配置 statement 上面的 useCache 属性</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据 id 查询 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span>  </span><br><span class="line">    select * from user where id = #&#123;uid&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将 UserDao.xml 映射文件中的<code>&lt;select&gt;</code>标签中设置 useCache=”true”代表当前这个 statement 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 </p>
<p><strong>注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存。</strong></p>
<h3 id="二级缓存测试"><a href="#二级缓存测试" class="headerlink" title="二级缓存测试"></a>二级缓存测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testL2Cache</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().buil(in);</span><br><span class="line">    SqlSession sqlSession1 = factory.openSession();</span><br><span class="line">    IUserDao dao1 = sqlSession1.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1 = dao1.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    sqlSession1.close();<span class="comment">//一级缓存消失</span></span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession2 = factory.openSession();</span><br><span class="line">    IUserDao dao2 = sqlSession2.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = dao2.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    sqlSession2.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过上面的测试，我们发现执行了两次查询，并且在执行第一次查询后，我们关闭了一级缓存，再去执行第二 次查询时，我们发现并没有对数据库发出 sql 语句，所以此时的数据就只能是来自于我们所说的二级缓存。 </p>
<h3 id="二级缓存注意事项"><a href="#二级缓存注意事项" class="headerlink" title="二级缓存注意事项"></a>二级缓存注意事项</h3><p>当我们在使用二级缓存时，所缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化方式来保存对象。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（二）：基于代理Dao实现CRUD操作</title>
    <url>/2020/04/05/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E4%BA%8E%E4%BB%A3%E7%90%86Dao%E5%AE%9E%E7%8E%B0CRUD%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h2><blockquote>
<p>1、持久层接口和持久层接口的映射配置必须在相同的包下；  </p>
<p>2、持久层映射配置中 mapper 标签的 namespace 属性取值必须是持久层接口的全限定类名；  </p>
<p>3、SQL 语句的配置标签<code>&lt;select&gt;</code>,<code>&lt;insert&gt;</code>,<code>&lt;delete&gt;</code>,<code>&lt;update&gt;</code>的id属性必须和持久层接口的方法名相同。  </p>
</blockquote>
<h2 id="在持久层接口中编写CRUD方法"><a href="#在持久层接口中编写CRUD方法" class="headerlink" title="在持久层接口中编写CRUD方法"></a>在持久层接口中编写CRUD方法</h2><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 所有用户所构成的列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id所对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响数据库记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响数据库记录的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  影响数据库记录的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总记录数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在User的映射配置文件中配置"><a href="#在User的映射配置文件中配置" class="headerlink" title="在User的映射配置文件中配置"></a>在User的映射配置文件中配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">            <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">            <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.IUserDao"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">            select * from user</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>   <span class="attr">resultType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">            select * from user where id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span>  <span class="attr">resultType</span>=<span class="string">"Integer"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">                select last_insert_id();</span><br><span class="line">            <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">            insert into user(username,address,sex,birthday)     values(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">            update user set username=#&#123;username&#125;,address=#  &#123;address&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125; where   id=#&#123;id&#125;;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 删除用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where username like #&#123;userName&#125;;</span><br><span class="line">        <span class="comment">&lt;!--select * from user where username like '%$&#123;value&#125;%';--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 获取用户的总记录条数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotal"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        select count(id) from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在测试类添加测试"><a href="#在测试类添加测试" class="headerlink" title="在测试类添加测试"></a>在测试类添加测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SQLMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span> <span class="comment">//用于在测试方法执行后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务  注意：如果最后不提交，Insert将无效。</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            out.println(<span class="string">"-------------------------------------------"</span>);</span><br><span class="line">            out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = userDao.findById(<span class="number">41</span>);</span><br><span class="line">        out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"testSave"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"荷兰"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">        out.println(<span class="string">"插入前："</span>+user);</span><br><span class="line">        out.println(<span class="string">"插入后："</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">55</span>);</span><br><span class="line">        user.setUsername(<span class="string">"testUpdate"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"荷兰"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = userDao.deleteUser(<span class="number">56</span>);</span><br><span class="line">        out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findByName(<span class="string">"%王%"</span>);</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = userDao.findTotal();</span><br><span class="line">        out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SqlMapConfig-xml的配置同学习笔记（一）"><a href="#SqlMapConfig-xml的配置同学习笔记（一）" class="headerlink" title="SqlMapConfig.xml的配置同学习笔记（一）"></a>SqlMapConfig.xml的配置同学习笔记（一）</h2><h2 id="整个项目结构"><a href="#整个项目结构" class="headerlink" title="整个项目结构"></a>整个项目结构</h2><img src="/2020/04/05/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E4%BA%8E%E4%BB%A3%E7%90%86Dao%E5%AE%9E%E7%8E%B0CRUD%E6%93%8D%E4%BD%9C/project_structure.png" class="" title="project_structure">

<h2 id="至此基本CRUD配置已经完成"><a href="#至此基本CRUD配置已经完成" class="headerlink" title="至此基本CRUD配置已经完成"></a>至此基本CRUD配置已经完成</h2><h2 id="实现细节及扩展"><a href="#实现细节及扩展" class="headerlink" title="实现细节及扩展"></a>实现细节及扩展</h2><ol>
<li><p>映射配置文件中的标签属性</p>
<ul>
<li>resultType 属性：用于指定结果集的类型。 </li>
<li>parameterType 属性：用于指定传入参数的类型</li>
<li>sql 语句中使用#{}字符：它代表占位符，相当于原来jdbc中的?，都是用于执行语句时替换实际的数据。具体的数据是由#{}里面的内容决定的。</li>
<li>#{}中内容的写法：ognl表达式。例如<code>#{user.username}</code>，它会先去找 <code>user</code> 对象，然后在 <code>user</code> 对象中找到 <code>username</code> 属性，并调用 <code>getUsername()</code>方法把值取出来。但是我们在 <code>parameterType</code> 属性上指定了实体类名称，所以可以省略 <code>user.</code> 而直接写 <code>username</code>。 </li>
</ul>
</li>
<li><p>模糊查询的另一种配置方式</p>
<ul>
<li><p>第一步：修改 SQL 语句的配置，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"domain.      User"</span>&gt;</span>       </span><br><span class="line">    select * from user where username like '%$&#123;value&#125;%' </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在上面将原来的<code>#{}</code>占位符，改成了<code>${value}</code>。注意如果用模糊查询的这种写法，那么<code>${value}</code>的写法就是固定的，不能写成其它名字。 </p>
<ul>
<li>第二步：测试，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.findByName(<span class="string">"王"</span>);</span><br><span class="line">    <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">        out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>#{}</code>与<code>${}</code>的区别  </p>
<ul>
<li><code>#{}</code>表示一个占位符号<br>通过<code>#{}</code>可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc 类型转换，<code>#{}</code>可以有效防止 sql 注入。<code>#{}</code>可以接收简单类型值或 pojo 属性值。 如果 parameterType 传输单个简单类 型值，<code>#{}</code>括号中可以是value或其它名称。</li>
<li><code>${}</code>表示拼接 sql 串<br>通过<code>${}</code>可以将parameterType传入的内容拼接在sql中且不进行jdbc类型转换， <code>${}</code>可以接收简 单类型值或 pojo 属性值，如果parameterType传输单个简单类型值，<code>${}</code>括号中只能是value。</li>
</ul>
</li>
<li><p>传递pojo包装对象<br>开发中通过 pojo 传递查询条件，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。<br>Pojo 类中包含 pojo。<br>需求：根据用户名查询用户信息，查询条件放到 QueryVo 的 user 属性中。</p>
<ul>
<li><p>编写QueryVo </p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> User user; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写持久层接口 </p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByVo</span><span class="params">(QueryVo vo)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>持久层接口的映射文件 </p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByVo"</span> <span class="attr">resultType</span>=<span class="string">"domain.User"</span> <span class="attr">parameterType</span>=<span class="string">"domain.QueryVo"</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;user.username&#125;; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试包装类作为参数 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByQueryVo</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    QueryVo vo = <span class="keyword">new</span> QueryVo();  </span><br><span class="line">    User user = <span class="keyword">new</span> User();  </span><br><span class="line">    user.setUserName(<span class="string">"%王%"</span>);  </span><br><span class="line">    vo.setUser(user);  </span><br><span class="line">    List&lt;User&gt; users = userDao.findByVo(vo);  </span><br><span class="line">    <span class="keyword">for</span>(User u : users) &#123;   </span><br><span class="line">        System.out.println(u);  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（五）：动态SQL语句</title>
    <url>/2020/04/13/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%8A%A8%E6%80%81SQL%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>Mybatis的映射文件中，前面我们的SQL都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL 是动态变化的，此时在前面的学习中我们的SQL就不能满足要求了。 </p>
<p>而动态SQL能帮助我们解决这些问题。其<a href="https://mybatis.org/mybatis-3/dynamic-sql.html" target="_blank" rel="noopener">官方文档</a>，描述如下： </p>
<img src="/2020/04/13/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%8A%A8%E6%80%81SQL%E8%AF%AD%E5%8F%A5/DynamicSQL.png" class="" title="DynamicSQL">

<h2 id="动态标签之-lt-where-gt-与-lt-if-gt-标签的联和使用"><a href="#动态标签之-lt-where-gt-与-lt-if-gt-标签的联和使用" class="headerlink" title="动态标签之&lt;where&gt;与&lt;if&gt;标签的联和使用"></a>动态标签之<code>&lt;where&gt;</code>与<code>&lt;if&gt;</code>标签的联和使用</h2><a id="more"></a>

<h3 id="1-持久层Dao接口"><a href="#1-持久层Dao接口" class="headerlink" title="1. 持久层Dao接口"></a>1. 持久层Dao接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserByCondition</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-持久层Dao映射配置"><a href="#2-持久层Dao映射配置" class="headerlink" title="2. 持久层Dao映射配置"></a>2. 持久层Dao映射配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据条件查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByCondition"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span></span><br><span class="line">            and username = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userSex != null"</span>&gt;</span></span><br><span class="line">            and sex = #&#123;userSex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"老王"</span>);</span><br><span class="line">    user.setUserSex(<span class="string">"女"</span>);</span><br><span class="line">    List&lt;User&gt; users = userDao.findUserByCondition(user);</span><br><span class="line">    <span class="keyword">for</span>(User u : users)&#123;</span><br><span class="line">        out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态标签之-lt-foreach-gt-的使用"><a href="#动态标签之-lt-foreach-gt-的使用" class="headerlink" title="动态标签之&lt;foreach&gt;的使用"></a>动态标签之<code>&lt;foreach&gt;</code>的使用</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h3><p>传入多个id查询用户信息，用下边两个sql实现：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USERS</span> <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'%张%'</span> <span class="keyword">AND</span> (<span class="keyword">id</span> =<span class="number">10</span> <span class="keyword">OR</span> <span class="keyword">id</span> =<span class="number">89</span> <span class="keyword">OR</span> <span class="keyword">id</span>=<span class="number">16</span>) </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USERS</span> <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'%张%'</span> <span class="keyword">AND</span> <span class="keyword">id</span> <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">89</span>,<span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<p>这样我们在进行范围查询时，就要将一个集合中的值，作为参数动态添加进来。<br>这样我们将如何进行参数的传递？ </p>
<h3 id="2-在QueryVo中加入一个List集合用于封装参数"><a href="#2-在QueryVo中加入一个List集合用于封装参数" class="headerlink" title="2. 在QueryVo中加入一个List集合用于封装参数"></a>2. 在QueryVo中加入一个List集合用于封装参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; idList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面请自行生成getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-持久层Dao接口"><a href="#3-持久层Dao接口" class="headerlink" title="3. 持久层Dao接口"></a>3. 持久层Dao接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserInIdList</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-持久层Dao映射配置"><a href="#4-持久层Dao映射配置" class="headerlink" title="4. 持久层Dao映射配置"></a>4. 持久层Dao映射配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据vo中的idList实现查询用户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserInIdList"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span> <span class="attr">parameterType</span>=<span class="string">"domain.QueryVo"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"idList != null and idList.size()&gt;0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"idList"</span> <span class="attr">open</span>=<span class="string">"and id in ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"customizedId"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                #&#123;customizedId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SQL语句：select 字段 from user where id in (?)<br><code>&lt;foreach&gt;</code>标签用于遍历集合，它的属性：  </p>
<ul>
<li>collection:代表要遍历的集合元素，注意编写时不要写#{}  </li>
<li>open:代表语句的开始部分  </li>
<li>close:代表结束部分 </li>
<li>item:代表遍历集合的每个元素，生成的变量名  </li>
<li>sperator:代表分隔符 </li>
</ul>
<h3 id="5-编写测试方法"><a href="#5-编写测试方法" class="headerlink" title="5. 编写测试方法"></a>5. 编写测试方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindInIdList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">    List&lt;Integer&gt; idList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    idList.add(<span class="number">41</span>);</span><br><span class="line">    idList.add(<span class="number">42</span>);</span><br><span class="line">    idList.add(<span class="number">43</span>);</span><br><span class="line">    idList.add(<span class="number">50</span>);</span><br><span class="line">    idList.add(<span class="number">60</span>);</span><br><span class="line">    vo.setIdList(idList);</span><br><span class="line">    List&lt;User&gt; users = userDao.findUserInIdList(vo);</span><br><span class="line">    <span class="keyword">for</span>(User u : users)&#123;</span><br><span class="line">        out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mybatis中简化编写的SQL片段"><a href="#Mybatis中简化编写的SQL片段" class="headerlink" title="Mybatis中简化编写的SQL片段"></a>Mybatis中简化编写的SQL片段</h2><p>Sql中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的。</p>
<h3 id="1-定义代码片段"><a href="#1-定义代码片段" class="headerlink" title="1. 定义代码片段"></a>1. 定义代码片段</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 抽取重复的语句代码片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"defaultSql"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-引用代码片段"><a href="#2-引用代码片段" class="headerlink" title="2. 引用代码片段"></a>2. 引用代码片段</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultSql"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据 id 查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultSql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    where id = #&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（六）：多表查询之一对多</title>
    <url>/2020/04/15/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%B9%8B%E4%B8%80%E5%AF%B9%E5%A4%9A/</url>
    <content><![CDATA[<p>考虑实际开发中可能遇到的以下情况： </p>
<p>现有一个简单的数据库包含一个User表和一个Account表。一个用户（User）可以有多个账户（Account）。  </p>
<p>具体关系如下:  </p>
<img src="/2020/04/15/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%B9%8B%E4%B8%80%E5%AF%B9%E5%A4%9A/userAccount.png" class="" title="userAccount">

<h2 id="一对一查询（多对一）"><a href="#一对一查询（多对一）" class="headerlink" title="一对一查询（多对一）"></a>一对一查询（多对一）</h2><ul>
<li><p>需求：<br>查询所有账户信息，关联查询下单用户信息。 </p>
</li>
<li><p>注意：<br>因为一个账户信息只能供某个用户使用，所以从查询账户信息出发关联查询用户信息为一对一查询。如果从用户信息出发查询用户下的账户信息则为一对多查询，因为一个用户可以有多个账户。</p>
</li>
</ul>
<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>首先定义一个账户实体类，然后再定义一个AccountUser类并继承Account类，在其中定义User类的成员属性，继而编写对应的Dao接口以及xml配置信息。 </p>
<p>这种方法定义了专门的po类作为输出类型，其中定义了sql查询结果集所有的字段。  </p>
<a id="more"></a>

<p>此方法较为简单，企业中使用普遍。但我个人不太喜欢这种方法，所以其实现在这里不做过多赘述。 </p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>使用resultMap，定义专门的resultMap用于映射一对一查询结果。  </p>
<p>通过面向对象的(has a)关系可以得知，我们可以在Account类中加入一个User类的对象来代表这个账户是哪个用户的。</p>
<h4 id="1-编写-Account-类"><a href="#1-编写-Account-类" class="headerlink" title="1. 编写 Account 类"></a>1. 编写 Account 类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从表实体应包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面请自行生成getter和setter以及toString方法。</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-编写AccountDao接口中的方法"><a href="#2-编写AccountDao接口中的方法" class="headerlink" title="2. 编写AccountDao接口中的方法"></a>2. 编写AccountDao接口中的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，并且带有用户名称和地址信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllWithUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>  </p>
<p><strong>第二种方式，将返回值改为了Account类型。</strong>  </p>
<p><strong>因为 Account 类中包含了一个User类的对象，它可以封装账户所对应的用户信息。</strong></p>
<h4 id="3-定义IAccountDao-xml文件"><a href="#3-定义IAccountDao-xml文件" class="headerlink" title="3. 定义IAccountDao.xml文件"></a>3. 定义IAccountDao.xml文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.IAccountDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义封装account和user的resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"domain.Account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一对一的关系映射， 配置封装user的内容--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 主键字段的对应 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--非主键字段的对应--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userAddress"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有账户同时包含用户名和地址信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllWithUser"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">        select u.*,a.id as aid,a.uid,a.money from account a , user u where u.id = a.uid;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-修改SqlMapConfig-xml中的-lt-mappers-gt-标签"><a href="#4-修改SqlMapConfig-xml中的-lt-mappers-gt-标签" class="headerlink" title="4. 修改SqlMapConfig.xml中的&lt;mappers&gt;标签"></a>4. 修改SqlMapConfig.xml中的<code>&lt;mappers&gt;</code>标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-新建-AccountTest-类并加入测试方法"><a href="#5-新建-AccountTest-类并加入测试方法" class="headerlink" title="5. 新建 AccountTest 类并加入测试方法"></a>5. 新建 AccountTest 类并加入测试方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = accountDao.findAllWithUser();</span><br><span class="line">    <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">        out.println(account);</span><br><span class="line">        out.println(account.getUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h2><ul>
<li><p>需求： </p>
<p>查询所有用户信息及用户关联的账户信息。 </p>
</li>
<li><p>分析： </p>
<p>用户信息和他的账户信息为一对多关系，并且查询过程中如果用户没有账户信息，此时也要将用户信息查询出来，我们想到了<strong>左外连接</strong>查询比较合适。 </p>
</li>
</ul>
<h3 id="1-考虑以下SQL语句"><a href="#1-考虑以下SQL语句" class="headerlink" title="1. 考虑以下SQL语句"></a>1. 考虑以下SQL语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> u.*,a.id <span class="keyword">as</span> aid,a.uid,a.money  </span><br><span class="line"> <span class="keyword">from</span> <span class="keyword">user</span> u </span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="keyword">account</span> a </span><br><span class="line"> <span class="keyword">on</span> u.id = a.uid</span><br></pre></td></tr></table></figure>

<p>测试该SQL语句在MySQL客户端工具的查询结果如下： </p>
<img src="/2020/04/15/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%B9%8B%E4%B8%80%E5%AF%B9%E5%A4%9A/SQLLeftJoin.png" class="" title="SQLLeftJoin">  

<h3 id="2-User类加入List-lt-Account-gt"><a href="#2-User类加入List-lt-Account-gt" class="headerlink" title="2. User类加入List&lt;Account&gt;"></a>2. User类加入<code>List&lt;Account&gt;</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多关系映射，主表实体应包含从表实体的集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accountList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面请自行生成getter和setter以及toString方法。</span></span><br><span class="line">    <span class="comment">//注意toString时不要处理accountList，否则测试时可能会报空指针异常。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-用户持久层Dao接口中加入查询方法"><a href="#3-用户持久层Dao接口中加入查询方法" class="headerlink" title="3. 用户持久层Dao接口中加入查询方法"></a>3. 用户持久层Dao接口中加入查询方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllWithAccounts</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-用户持久层Dao映射文件配置"><a href="#4-用户持久层Dao映射文件配置" class="headerlink" title="4. 用户持久层Dao映射文件配置"></a>4. 用户持久层Dao映射文件配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.UserDaoI"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义UserAccounts的resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountsMap"</span> <span class="attr">type</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userAddress"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accountList"</span> <span class="attr">ofType</span>=<span class="string">"domain.Account"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有User和关联的Accounts --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllWithAccounts"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountsMap"</span>&gt;</span></span><br><span class="line">        select u.*,a.id as aid,a.uid,a.money  from user u left outer join account a on u.id = a.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-在UserTest中添加测试方法"><a href="#5-在UserTest中添加测试方法" class="headerlink" title="5. 在UserTest中添加测试方法"></a>5. 在UserTest中添加测试方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithAccounts</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.findAllWithAccounts();</span><br><span class="line">    <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">        out.println(<span class="string">"-------------------------------------------"</span>);</span><br><span class="line">        out.println(user);</span><br><span class="line">        out.println(user.getAccountList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-测试结果"><a href="#6-测试结果" class="headerlink" title="6. 测试结果"></a>6. 测试结果</h3><img src="/2020/04/15/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%B9%8B%E4%B8%80%E5%AF%B9%E5%A4%9A/result.png" class="" title="result">]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（八）：延迟加载策略</title>
    <url>/2020/04/21/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h2 id="Mybatis延迟加载策略"><a href="#Mybatis延迟加载策略" class="headerlink" title="Mybatis延迟加载策略"></a>Mybatis延迟加载策略</h2><p>通过前面的学习，我们已经掌握了Mybatis中一对一，一对多，多对多关系的配置及实现，可以实现对象的关联查询。实际开发过程中很多时候我们并不需要总是在加载用户信息时就一定要加载他的账户信息。此时就是我们所说的延迟加载。 </p>
<h2 id="何为延迟加载"><a href="#何为延迟加载" class="headerlink" title="何为延迟加载?"></a>何为延迟加载?</h2><ul>
<li><p>延迟加载：<br>就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载. 好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。  </p>
</li>
<li><p>坏处：<br>因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降。 </p>
</li>
</ul>
<a id="more"></a>

<h2 id="实现需求"><a href="#实现需求" class="headerlink" title="实现需求"></a>实现需求</h2><ul>
<li><p>需求：<br>查询账户(Account)信息并且关联查询用户(User)信息。如果先查询账户(Account)信息即可满足要 求，当我们需要查询用户(User)信息时再查询用户(User)信息。把对用户(User)信息的按需去查询就是延迟加载。 </p>
<p>在前面学习中实现多表操作时，我们使用了resultMap来实现一对一，一对多，多对多关系的操作。主要是通过<code>association</code>、<code>collection</code>实现一对一及一对多映射。association、collection具备延迟加载功能。</p>
</li>
</ul>
<h2 id="使用-assocation-实现延迟加载"><a href="#使用-assocation-实现延迟加载" class="headerlink" title="使用 assocation 实现延迟加载"></a>使用 assocation 实现延迟加载</h2><p>需求：<br> 查询账户信息同时查询用户信息。 </p>
<h3 id="1-账户的持久层DAO接口"><a href="#1-账户的持久层DAO接口" class="headerlink" title="1.  账户的持久层DAO接口"></a>1.  账户的持久层DAO接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllLazily</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-账户的持久层映射文件"><a href="#2-账户的持久层映射文件" class="headerlink" title="2.  账户的持久层映射文件"></a>2.  账户的持久层映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.IAccountDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义封装account的resultMap --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实现一对一的延迟加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountMap"</span> <span class="attr">type</span>=<span class="string">"domain.Account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 一对一的关系映射， 配置封装user的内容</span></span><br><span class="line"><span class="comment">            select属性指定的内容：查询用户的唯一标志</span></span><br><span class="line"><span class="comment">            column属性指定的内容：用户根据Id查询时所需要的参数的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"domain.User"</span> <span class="attr">select</span>=<span class="string">"dao.IUserDao.findById"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有账户 并延迟加载用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllLazily"</span> <span class="attr">resultMap</span>=<span class="string">"accountMap"</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>select： 填写我们要调用的 select 映射的 id   </p>
</li>
<li><p>column： 填写我们要传递给 select 映射的参数  </p>
</li>
</ul>
<h3 id="3-用户的持久层接口和映射文件"><a href="#3-用户的持久层接口和映射文件" class="headerlink" title="3.  用户的持久层接口和映射文件"></a>3.  用户的持久层接口和映射文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.IUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 查询结果的列名和实体类的属性名的对应关系 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实现一对多的延迟加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主键字段的对应 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非主键字段的对应--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userAddress"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accountList"</span> <span class="attr">ofType</span>=<span class="string">"domain.Account"</span> <span class="attr">select</span>=<span class="string">"dao.IAccountDao.findAccountByUid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-开启Mybatis的延迟加载策略"><a href="#4-开启Mybatis的延迟加载策略" class="headerlink" title="4. 开启Mybatis的延迟加载策略"></a>4. 开启Mybatis的延迟加载策略</h3><p>我们需要在Mybatis的配置文件SqlMapConfig.xml文件中添加延迟加载的配置。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span></span></span><br></pre></td></tr></table></figure>

<h3 id="5-编写测试类"><a href="#5-编写测试类" class="headerlink" title="5. 编写测试类"></a>5. 编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllLazily</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = accountDao.findAllLazily();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(Account account : accounts)&#123;</span></span><br><span class="line"><span class="comment">        out.println(account);</span></span><br><span class="line"><span class="comment">        out.println(account.getUser());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-结果及分析"><a href="#6-结果及分析" class="headerlink" title="6. 结果及分析"></a>6. 结果及分析</h3><ul>
<li>当我们次只是将Account对象查询出来放入List集合中，并没有涉及到User对象，所以就没有发出SQL语句查询账户所关联的User对象的查询。 </li>
</ul>
<img src="/2020/04/21/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%AD%96%E7%95%A5/Lazy.png" class="" title="Lazy">

<ul>
<li>当我们去掉注释，对Account进行操作时，Mybatis自动发出SQL语句查询账户所关联的User对象的查询。 </li>
</ul>
<img src="/2020/04/21/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%AD%96%E7%95%A5/NotLazy.png" class="" title="NotLazy">

<h2 id="使用-collection-实现延迟加载"><a href="#使用-collection-实现延迟加载" class="headerlink" title="使用 collection 实现延迟加载"></a>使用 collection 实现延迟加载</h2><p>同样我们也可以在一对多关系配置的<code>&lt;collection&gt;</code>结点中配置延迟加载策略。 </p>
<p><code>&lt;collection</code>&gt;结点中也有select属性，column属性。  </p>
<p>需求：完成加载用户对象时，查询该用户所拥有的账户信息。</p>
<h3 id="1-在User实体类中加入List属性"><a href="#1-在User实体类中加入List属性" class="headerlink" title="1. 在User实体类中加入List属性"></a>1. 在User实体类中加入List<Account>属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多关系映射，主表实体应包含从表实体的集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accountList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面请自行生成getter和setter以及toString方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-编写用户和账户持久层接口"><a href="#2-编写用户和账户持久层接口" class="headerlink" title="2. 编写用户和账户持久层接口"></a>2. 编写用户和账户持久层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户Dao接口</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllLazily</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//账户Dao接口</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-编写用户持久层映射配置"><a href="#3-编写用户持久层映射配置" class="headerlink" title="3. 编写用户持久层映射配置"></a>3. 编写用户持久层映射配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 查询结果的列名和实体类的属性名的对应关系 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 实现一对多的延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主键字段的对应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非主键字段的对应--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userAddress"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accountList"</span> <span class="attr">ofType</span>=<span class="string">"domain.Account"</span> <span class="attr">select</span>=<span class="string">"dao.IAccountDao.findAccountByUid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllLazily"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;collection&gt;</code>标签：主要用于加载关联的集合对象。  </p>
<p>select 属性：用于指定查询 account 列表的 sql 语句，所以填写的是该 sql 映射的 id。  </p>
<p>column 属性：用于指定 select 属性的 sql 语句的参数来源，上面的参数来自于 user 的 id 列，所以就写成 id 这一 个字段名了。</p>
<h3 id="4-编写账户持久层映射配置"><a href="#4-编写账户持久层映射配置" class="headerlink" title="4. 编写账户持久层映射配置"></a>4. 编写账户持久层映射配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户id查询账户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAccountByUid"</span> <span class="attr">resultMap</span>=<span class="string">"accountMap"</span>&gt;</span></span><br><span class="line">    select * from account where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-编写测试类-1"><a href="#5-编写测试类-1" class="headerlink" title="5. 编写测试类"></a>5. 编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllLazily</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.findAllLazily();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(User user : users)&#123;</span></span><br><span class="line"><span class="comment">        out.println("-------------------------------------------");</span></span><br><span class="line"><span class="comment">        out.println(user);</span></span><br><span class="line"><span class="comment">        out.println(user.getAccountList());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-结果及分析-1"><a href="#6-结果及分析-1" class="headerlink" title="6. 结果及分析"></a>6. 结果及分析</h3><img src="/2020/04/21/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%AD%96%E7%95%A5/Lazy2.png" class="" title="NotLazy2">

<ul>
<li>当只查询不操作时，Mybatis并没有加载 Account 账户信息。 </li>
</ul>
<img src="/2020/04/21/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%AD%96%E7%95%A5/NotLazy2.png" class="" title="NotLazy2">

<ul>
<li>去掉注释后，Mybatis加载了 Account 账户信息。 </li>
</ul>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（十）：Mybatis注解开发</title>
    <url>/2020/04/28/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9AMybatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>这几年来注解开发越来越流行，Mybatis 也可以使用注解开发方式，这样我们就可以减少编写 Mapper 映射文件了。</p>
<h2 id="mybatis-的常用注解说明"><a href="#mybatis-的常用注解说明" class="headerlink" title="mybatis 的常用注解说明"></a>mybatis 的常用注解说明</h2><p>@Insert:实现新增<br>@Update:实现更新<br>@Delete:实现删除<br>@Select:实现查询<br>@Result:实现结果集封装<br>@Results:可以与@Result 一起使用，封装多个结果集<br>@ResultMap:实现引用<br>@Results 定义的封装<br>@One:实现一对一结果集封装<br>@Many:实现一对多结果集封装<br>@SelectProvider: 实现动态 SQL 映射<br>@CacheNamespace:实现注解二级缓存的使用 </p>
<h2 id="使用-Mybatis-注解实现基本CRUD"><a href="#使用-Mybatis-注解实现基本CRUD" class="headerlink" title="使用 Mybatis 注解实现基本CRUD"></a>使用 Mybatis 注解实现基本CRUD</h2><p>单表的 CRUD 操作是最基本的操作，前面我们的学习都是基于Mybaits的映射文件来实现的。 </p>
<a id="more"></a>

<h3 id="1-编写实体类"><a href="#1-编写实体类" class="headerlink" title="1. 编写实体类"></a>1. 编写实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面请自行生成getter和setter以及toString方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-使用注解方式开发持久层接口"><a href="#2-使用注解方式开发持久层接口" class="headerlink" title="2. 使用注解方式开发持久层接口"></a>2. 使用注解方式开发持久层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDaoI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"userMap"</span>, value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"userId"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"id"</span>, property = <span class="string">"userId"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"userName"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"address"</span>, property = <span class="string">"userAddress"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"sex"</span>, property = <span class="string">"userSex"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"userBirthday"</span>),</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"Insert into user (username,address,sex,birthday) values(#&#123;userName&#125;,#&#123;userAddress&#125;,#&#123;userSex&#125;,#&#123;userBirthday&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username=#&#123;userName&#125;,address=#&#123;userAddress&#125;,sex=#&#123;userSex&#125;,birthday=#&#123;userBirthday&#125; where id=#&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(value = &#123;<span class="string">"userMap"</span>&#125;)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where username like #&#123;userName&#125;;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(value = &#123;<span class="string">"userMap"</span>&#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select count(*) from user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-编写-SqlMapConfig-配置文件以及-jdbcConfig-properties配置文件"><a href="#3-编写-SqlMapConfig-配置文件以及-jdbcConfig-properties配置文件" class="headerlink" title="3.  编写 SqlMapConfig 配置文件以及 jdbcConfig.properties配置文件"></a>3.  编写 SqlMapConfig 配置文件以及 jdbcConfig.properties配置文件</h3><p>SqlMapConfig 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbcConfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定带有注解的dao接口所在位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jdbcConfig.properties配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_db?characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="编写测试方法"><a href="#编写测试方法" class="headerlink" title="编写测试方法"></a>编写测试方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoCrudTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserDaoI userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        userDao = session.getMapper(UserDaoI<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">"mybatis_anno"</span>);</span><br><span class="line">        user.setUserAddress(<span class="string">"荷兰"</span>);</span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">"mybatis_anno"</span>);</span><br><span class="line">        user.setUserAddress(<span class="string">"荷兰郑穆斯特丹"</span>);</span><br><span class="line">        user.setUserId(<span class="number">53</span>);</span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">54</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = userDao.findById(<span class="number">53</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.findUserByName(<span class="string">"%王%"</span>);</span><br><span class="line">        <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = userDao.findTotal();</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用注解实现复杂关系映射开发以及使用二级缓存"><a href="#使用注解实现复杂关系映射开发以及使用二级缓存" class="headerlink" title="使用注解实现复杂关系映射开发以及使用二级缓存"></a>使用注解实现复杂关系映射开发以及使用二级缓存</h2><p>实现复杂关系映射之前我们可以在映射文件中通过配置<code>&lt;resultMap&gt;</code>来实现，在使用注解开发时我们需要借助@Results 注解，@Result 注解，@One 注解，@Many 注解。</p>
<h3 id="复杂关系映射的注解说明"><a href="#复杂关系映射的注解说明" class="headerlink" title="复杂关系映射的注解说明"></a>复杂关系映射的注解说明</h3><ul>
<li><p>@Results 注解<br>代替的是标签<resultMap>  </p>
<p>该注解中可以使用单个@Result 注解，也可以使用@Result 集合  </p>
<p>@Results（{@Result（），@Result（）}）或@Results（@Result（）） </p>
</li>
<li><p>@Resutl 注解<br>代替了 <code>&lt;id&gt;</code>标签和<code>&lt;result&gt;</code>标签  </p>
<p>@Result 中 属性介绍：<br>id 是否是主键字段<br>column 数据库的列名<br>property 需要装配的属性名<br>one  需要使用的@One 注解(@Result(one=@One)()))<br>many  需要使用的@Many 注解(@Result(many=@many)())) </p>
</li>
<li><p>@One 注解（一对一）<br>代替了<code>&lt;assocation&gt;</code>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。 </p>
<p>@One 注解属性介绍：<br>select  指定用来多表查询的 sqlmapper<br>fetchType 会覆盖全局的配置参数 lazyLoadingEnabled。 </p>
<p>使用格式：@Result(column=” “,property=””,one=@One(select=””)) </p>
</li>
<li><p>@Many 注解（多对一）<br>代替了<code>&lt;Collection&gt;</code>标签,是是多表查询的关键，在注解中用来指定子查询返回对象集合。  </p>
<p><strong>注意：聚集元素用来处理“一对多”的关系。需要指定映射的 Java 实体类的属性，属性的 javaType （一般为 ArrayList）但是注解中可以不定义；</strong>  </p>
<p>使用格式：   @Result(property=””,column=””,many=@Many(select=””)) </p>
</li>
</ul>
<h3 id="使用注解实现一对一复杂关系映射及延迟加载"><a href="#使用注解实现一对一复杂关系映射及延迟加载" class="headerlink" title="使用注解实现一对一复杂关系映射及延迟加载"></a>使用注解实现一对一复杂关系映射及延迟加载</h3><ul>
<li>需求：加载账户信息时并且加载该账户的用户信息，根据情况可实现延迟加载。（注解方式实现） </li>
</ul>
<h4 id="1-添加-User-实体类及-Account-实体类"><a href="#1-添加-User-实体类及-Account-实体类" class="headerlink" title="1. 添加 User 实体类及 Account 实体类"></a>1. 添加 User 实体类及 Account 实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多关系映射，主表实体应包含从表实体的集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accountList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面请自行生成getter和setter以及toString方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从表实体应包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面请自行生成getter和setter以及toString方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-添加账户的持久层接口并使用注解配置"><a href="#2-添加账户的持久层接口并使用注解配置" class="headerlink" title="2. 添加账户的持久层接口并使用注解配置"></a>2. 添加账户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDaoI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id=<span class="string">"accountMap"</span>,value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"money"</span>, property = <span class="string">"money"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"user"</span>, column = <span class="string">"uid"</span>, one = <span class="meta">@One</span>(select = <span class="string">"dao.UserDaoI.findById"</span>, fetchType = FetchType.EAGER))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllWithUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account where uid = #&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-添加用户的持久层接口并使用注解配置"><a href="#3-添加用户的持久层接口并使用注解配置" class="headerlink" title="3. 添加用户的持久层接口并使用注解配置"></a>3. 添加用户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDaoI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"userMap"</span>, value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"userId"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"id"</span>, property = <span class="string">"userId"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"userName"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"address"</span>, property = <span class="string">"userAddress"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"sex"</span>, property = <span class="string">"userSex"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"userBirthday"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"accountList"</span>, column = <span class="string">"id"</span>, many = <span class="meta">@Many</span>(select = <span class="string">"dao.AccountDaoI.findByUid"</span>,</span><br><span class="line">                    fetchType = FetchType.LAZY))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllWithAccounts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"Insert into user (username,address,sex,birthday) values(#&#123;userName&#125;,#&#123;userAddress&#125;,#&#123;userSex&#125;,#&#123;userBirthday&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username=#&#123;userName&#125;,address=#&#123;userAddress&#125;,sex=#&#123;userSex&#125;,birthday=#&#123;userBirthday&#125; where id=#&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(value = &#123;<span class="string">"userMap"</span>&#125;)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where username like #&#123;userName&#125;;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(value = &#123;<span class="string">"userMap"</span>&#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select count(*) from user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-开启二级缓存支持"><a href="#4-开启二级缓存支持" class="headerlink" title="4. 开启二级缓存支持"></a>4. 开启二级缓存支持</h4><ul>
<li><p>在 SqlMapConfig 中开启二级缓存支持 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在持久层接口中使用注解配置二级缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace</span>(blocking=<span class="keyword">true</span>)<span class="comment">//mybatis 基于注解方式实现配置二级缓存 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编写测试方法-1"><a href="#编写测试方法-1" class="headerlink" title="编写测试方法"></a>编写测试方法</h4></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> AccountDaoI accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        accountDao = session.getMapper(AccountDaoI<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllWithUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; userList = accountDao.findAllWithUser();</span><br><span class="line">        <span class="keyword">for</span>(Account account : userList)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">            System.out.println(account.getUser());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（四）：SqlMapConfig.xml配置文件</title>
    <url>/2020/04/09/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ASqlMapConfig-xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="SqlMapConfig-xml中配置的内容和顺序"><a href="#SqlMapConfig-xml中配置的内容和顺序" class="headerlink" title="SqlMapConfig.xml中配置的内容和顺序"></a>SqlMapConfig.xml中配置的内容和顺序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-properties（属性）</span><br><span class="line">    --property </span><br><span class="line">-settings（全局配置参数）  </span><br><span class="line">    --setting </span><br><span class="line">-typeAliases（类型别名） </span><br><span class="line">    --typeAliase  </span><br><span class="line">    --package </span><br><span class="line">-typeHandlers（类型处理器） </span><br><span class="line">-objectFactory（对象工厂） </span><br><span class="line">-plugins（插件） </span><br><span class="line">-environments（环境集合属性对象）  </span><br><span class="line">    --environment（环境子属性对象）   </span><br><span class="line">        ---transactionManager（事务管理）   </span><br><span class="line">        ---dataSource（数据源） </span><br><span class="line">-mappers（映射器）  </span><br><span class="line">    --mapper  </span><br><span class="line">    --package</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h2 id="properties（属性）"><a href="#properties（属性）" class="headerlink" title="properties（属性）"></a>properties（属性）</h2><p>在使用 properties 标签配置时，我们可以采用两种方式指定属性配置。 </p>
<h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt; </span><br><span class="line">    &lt;property name&#x3D;&quot;jdbc.driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;  </span><br><span class="line">    &lt;property name&#x3D;&quot;jdbc.url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_db?characterEncoding&#x3D;utf-8&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;jdbc.username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;  </span><br><span class="line">    &lt;property name&#x3D;&quot;jdbc.password&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;  </span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>

<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><ol>
<li><p>在 classpath 下定义 jdbcConfig.properties 文件 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver </span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_db?characterEncoding&#x3D;utf-8</span><br><span class="line">jdbc.username&#x3D;root </span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure></li>
<li><p>properties 标签配置 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置properties</span></span><br><span class="line"><span class="comment">     可以在标签内部配置连接数据库的信息。也可以通过属性引用外部配置文件信息</span></span><br><span class="line"><span class="comment">     resource属性： 常用的</span></span><br><span class="line"><span class="comment">         用于指定配置文件的位置，是按照类路径的写法来写，并且必须存在于类路径下。</span></span><br><span class="line"><span class="comment">     url属性：</span></span><br><span class="line"><span class="comment">         是要求按照Url的写法来写地址</span></span><br><span class="line"><span class="comment">         URL：Uniform Resource Locator 统一资源定位符。它是可以唯一标识一个资源的位置。</span></span><br><span class="line"><span class="comment">         它的写法：</span></span><br><span class="line"><span class="comment">             http://localhost:8080/mybatisserver/demo1Servlet</span></span><br><span class="line"><span class="comment">             协议      主机     端口       URI</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         URI:Uniform Resource Identifier 统一资源标识符。它是在应用中可以唯一定位一个资源的。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span> <span class="attr">url</span>=<span class="string">"file:///D:/IdeaProjects/mybatisCRUD/src/main/resources/jdbcConfig.properties"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>dataSource 标签配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="typeAliases（类型别名）"><a href="#typeAliases（类型别名）" class="headerlink" title="typeAliases（类型别名）"></a>typeAliases（类型别名）</h2><p>前面我们提到过 Mybatis 支持的默认别名，我们也可以采用自定义别名方式来开发。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 单个别名定义 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"domain.User"</span>/&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"domain"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">" 其它包 "</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="mappers（映射器）"><a href="#mappers（映射器）" class="headerlink" title="mappers（映射器）"></a>mappers（映射器）</h2><ul>
<li><p><code>&lt;mapper resource=&quot; &quot; /&gt;</code><br>使用相对于类路径的资源<br>如：<code>&lt;mapper resource=&quot;dao/IUserDao.xml&quot; /&gt;</code>   </p>
</li>
<li><p><code>&lt;mapper class=&quot; &quot; /&gt;</code><br>使用 mapper 接口类路径<br>如：<code>&lt;mapper class=&quot;dao.UserDao&quot;/&gt;</code><br><strong>注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。</strong></p>
</li>
<li><p><code>&lt;package name=&quot;&quot;/&gt;</code><br>注册指定包下的所有 mapper 接口<br>如：<code>&lt;package name=&quot;dao&quot;/&gt;</code><br><strong>注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>我个人的IDEA常用配置</title>
    <url>/2020/04/01/%E6%88%91%E4%B8%AA%E4%BA%BA%E7%9A%84IDEA%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="修改项目的Target-bytecode-version"><a href="#修改项目的Target-bytecode-version" class="headerlink" title="修改项目的Target bytecode version"></a>修改项目的Target bytecode version</h2><blockquote>
<ol>
<li><p>File -&gt; Setting   </p>
</li>
<li><p>找到Java Compiler项  </p>
</li>
</ol>
<img src="/2020/04/01/%E6%88%91%E4%B8%AA%E4%BA%BA%E7%9A%84IDEA%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9/Target_bytecode_version.png" class="" title="Target bytecode version">  

<ol start="3">
<li>将项目的Target bytecode version 值设置为本地Java的版本。</li>
</ol>
<a id="more"></a>  

<ol start="4">
<li><p>File -&gt; Other Setting -&gt; Setting for New Projects  </p>
</li>
<li><p>重复第3步</p>
</li>
</ol>
</blockquote>
<h2 id="修改Project-SDK-版本、Project-language-level-以及-Modules-language-level"><a href="#修改Project-SDK-版本、Project-language-level-以及-Modules-language-level" class="headerlink" title="修改Project SDK 版本、Project language level 以及 Modules language level"></a>修改Project SDK 版本、Project language level 以及 Modules language level</h2><blockquote>
<ol>
<li><p>File -&gt; Project Struture  </p>
</li>
<li><p>找到Project项  </p>
</li>
</ol>
<img src="/2020/04/01/%E6%88%91%E4%B8%AA%E4%BA%BA%E7%9A%84IDEA%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9/ProjectSetting.png" class="" title="ProjectSetting">  

<ol start="3">
<li><p>将Project SDK 版本与Project language level值设置为本地&gt;Java的版本。  </p>
</li>
<li><p>找到Modules项  </p>
</li>
</ol>
<img src="/2020/04/01/%E6%88%91%E4%B8%AA%E4%BA%BA%E7%9A%84IDEA%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9/ModulesSetting.png" class="" title="ModulesSetting"> 

<ol start="5">
<li><p>将Modules language level值设置为本地Java的版本。</p>
</li>
<li><p>File -&gt; Other Setting -&gt; Structure for New Projects  </p>
</li>
<li><p>重复第3步。  </p>
</li>
</ol>
</blockquote>
<h2 id="修改自带Maven的默认仓库路径。"><a href="#修改自带Maven的默认仓库路径。" class="headerlink" title="修改自带Maven的默认仓库路径。"></a>修改自带Maven的默认仓库路径。</h2><blockquote>
<p>IDEA自带的Maven的仓库路径默认在C盘User文件夹，不是很方便管&gt;理。 </p>
<p>我们可以修改至指定文件夹。</p>
<ol>
<li><p>File -&gt; Other Setting -&gt; Setting for New Projects   </p>
</li>
<li><p>找到Maven项  </p>
</li>
</ol>
<img src="/2020/04/01/%E6%88%91%E4%B8%AA%E4%BA%BA%E7%9A%84IDEA%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9/Maven.png" class="" title="Maven"> 

<ol start="3">
<li><p>在Local repository行勾选override，并指定自定义路径。  </p>
</li>
<li><p>以上设置只对以后新建的项目有效，如果有旧项目记得对旧项目重复步骤2和3。</p>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记（一）：Spring概述</title>
    <url>/2020/05/01/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ASpring%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="Spring-是什么"><a href="#Spring-是什么" class="headerlink" title="Spring 是什么"></a>Spring 是什么</h2><p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 <strong>IoC（Inverse Of Control： 反转控制）</strong>和 <strong>AOP（Aspect Oriented Programming：面向切面编程）</strong>为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。 </p>
<h2 id="Spring-的发展历程"><a href="#Spring-的发展历程" class="headerlink" title="Spring 的发展历程"></a>Spring 的发展历程</h2><ul>
<li><p>1997 年，IBM提出了EJB 的思想   </p>
</li>
<li><p>1998 年，SUN制定开发标准规范 EJB1.0   </p>
</li>
<li><p>1999 年，EJB1.1 发布   </p>
</li>
<li><p>2001 年，EJB2.0 发布   </p>
</li>
<li><p>2003 年，EJB2.1 发布   </p>
</li>
<li><p>2006 年，EJB3.0 发布   </p>
</li>
<li><p>Rod Johnson（spring之父）<br>Expert One-to-One J2EE Design and Development(2002)<br>阐述了 J2EE 使用EJB 开发设计的优点及解决方案<br>Expert One-to-One J2EE Development without EJB(2004)<br>阐述了 J2EE 开发不使用 EJB的解决方式（Spring 雏形）    </p>
</li>
<li><p>2017 年 9 月份发布了 spring 的最新版本 spring 5.0 通用版（GA） </p>
</li>
</ul>
<a id="more"></a>

<h2 id="Spring-的优势"><a href="#Spring-的优势" class="headerlink" title="Spring 的优势"></a>Spring 的优势</h2><ul>
<li><p>方便解耦，简化开发<br>通过 Spring提供的 IoC容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。 </p>
</li>
<li><p>AOP编程的支持<br>通过 Spring的 AOP 功能，方便进行面向切面的编程，许多不容易用传统OOP 实现的功能可以通过 AOP 轻松应付。 </p>
</li>
<li><p>声明式事务的支持<br>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。 </p>
</li>
<li><p>方便程序的测试<br>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p>
</li>
<li><p>方便集成各种优秀框架<br>Spring可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz 等）的直接支持。</p>
</li>
<li><p>降低 JavaEE API的使用难度<br>Spring对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。  </p>
</li>
<li><p>Java源码是经典学习范例<br>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java 设计模式灵活运用以及对 Java技术的高深造诣。它的源代码无意是 Java 技术的最佳实践的范例。</p>
</li>
</ul>
<h2 id="Spring-的体系结构"><a href="#Spring-的体系结构" class="headerlink" title="Spring 的体系结构"></a>Spring 的体系结构</h2><img src="/2020/05/01/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ASpring%E6%A6%82%E8%BF%B0/Spring.png" class="" title="Spring">]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记（二）：IoC的概念和作用</title>
    <url>/2020/05/01/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AIoC%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<h2 id="什么是程序的耦合"><a href="#什么是程序的耦合" class="headerlink" title="什么是程序的耦合"></a>什么是程序的耦合</h2><p>耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)。耦合性存在于各个领域，而非软件设计中独有的，但是我们只讨论软件工程中的耦合。 </p>
<p>在软件工程中，耦合指的就是就是对象之间的依赖性。对象之间的耦合越高，维护成本越高。因此对象的设计应使类和构件之间的耦合最小。软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。<strong>划分模块的一个准则就是高内聚低耦合。</strong></p>
<a id="more"></a>

<p>它有如下分类：</p>
<ul>
<li>（1）内容耦合。<br>当一个模块直接修改或操作另一个模块的数据时，或一个模块不通过正常入口而转入另一个模块时，这样的耦合被称为内容耦合。内容耦合是最高程度的耦合，应该避免使用之。</li>
<li>（2）公共耦合。<br>两个或两个以上的模块共同引用一个全局数据项，这种耦合被称为公共耦合。在具有大量公共耦合的结构中，确定究竟是哪个模块给全局变量赋了一个特定的值是十分困难的。</li>
<li>（3） 外部耦合 。<br>一组模块都访问同一全局简单变量而不是同一全局数据结构，而且不是通过参数表传递该全局变量的信息，则称之为外部耦合。  </li>
<li>（4） 控制耦合 。<br>一个模块通过接口向另一个模块传递一个控制信号，接受信号的模块根据信号值而进行适当的动作，这种耦合被称为控制耦合。</li>
<li>（5）标记耦合 。<br>若一个模块 A 通过接口向两个模块 B 和 C 传递一个公共参数，那么称模块 B 和 C 之间存在一个标记耦合。</li>
<li>（6） 数据耦合。<br>模块之间通过参数来传递数据，那么被称为数据耦合。数据耦合是最低的一种耦合形式，系统中一般都存在这种类型的耦合，因为为了完成一些有意义的功能，往往需要将某些模块的输出数据作为另一些模块的输入数据。</li>
<li>（7） 非直接耦合 。<br>两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的。</li>
</ul>
<p><strong>总结：</strong><br>耦合是影响软件复杂程度和设计质量的一个重要因素，在设计上我们应采用以下原则：如果模块间必须存在耦合，就尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，尽量避免使用内容耦合。 </p>
<p><strong>内聚与耦合</strong><br>内聚标志一个模块内各个元素彼此结合的紧密程度，它是信息隐蔽和局部化概念的自然扩展。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。 程序讲究的是低耦合，高内聚。就是同一个模块内的各个元素之间要高度紧密，但是各个模块之<br>间的相互依存度却要不那么紧密。 </p>
<p>内聚和耦合是密切相关的，同其他模块存在高耦合的模块意味着低内聚，而高内聚的模块意味着该模块同其他<br>模块之间是低耦合。在进行软件设计时，应力争做到高内聚，低耦合。</p>
<p><strong>我们在开发中，有些依赖关系是必须的，有些依赖关系可以通过优化代码来解除的。</strong></p>
<p>请看下面的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再比如，早期我们的 JDBC 操作，注册驱动时，我们为什么不使用 DriverManager 的 register 方法，而是采用 Class.forName 的方式？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        <span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="comment">//3.获取预处理 sql 语句对象</span></span><br><span class="line">        <span class="comment">//4.获取结果集</span></span><br><span class="line">        <span class="comment">//5.遍历结果集</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原因就是：</strong><br>我们的类依赖了数据库的具体驱动类（MySQL），如果这时候更换了数据库品牌（比如 Oracle），需要修改源码来重新数据库驱动。这显然不是我们想要的。</p>
<h2 id="解决程序耦合的思路"><a href="#解决程序耦合的思路" class="headerlink" title="解决程序耦合的思路"></a>解决程序耦合的思路</h2><p>当是我们讲解 jdbc 时，是通过反射来注册驱动的，代码如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//此处只是一个字符串</span></span><br></pre></td></tr></table></figure>

<p>此时的好处是，我们的类中不再依赖具体的驱动类，此时就算删除 mysql 的驱动 jar 包，依然可以编译（运行就不要想了，没有驱动不可能运行成功的）。 </p>
<p>同时，也产生了一个新的问题，mysql 驱动的全限定类名字符串是在 java 类中写死的，一旦要改还是要修改源码。 </p>
<p>解决这个问题也很简单，使用配置文件配置。</p>
<h2 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h2><p>在实际开发中我们可以把三层的对象都使用配置文件配置起来，当启动服务器应用加载的时候，让一个类中的方法通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。 </p>
<p>那么，这个读取配置文件，创建和获取三层对象的类就是工厂。</p>
<h2 id="控制反转-Inversion-Of-Control"><a href="#控制反转-Inversion-Of-Control" class="headerlink" title="控制反转 (Inversion Of Control)"></a>控制反转 (Inversion Of Control)</h2><p>上一小节解耦的思路有 2 个问题：</p>
<ul>
<li><p>1、存哪去？ </p>
<p>分析：由于我们是很多对象，肯定要找个集合来存。这时候有 Map 和 List 供选择。到底选 Map 还是 List 就看我们有没有查找需求。有查找需求，选 Map。</p>
<p>所以我们的答案就是： 在应用加载时，创建一个 Map，用于存放三层对象。我们把这个 map 称之为<strong>容器</strong>。</p>
</li>
<li><p>2、还是没解释什么是工厂？<br>工厂就是负责给我们从容器中获取指定对象的类。这时候我们获取对象的方式发生了改变。</p>
<p>原来：我们在获取对象时，都是采用 new 的方式。是主动的。</p>
<p>现在：我们获取对象时，同时跟工厂要，有工厂为我们查找或者创建对象。是被动的。</p>
<p>这种被动接收的方式获取对象的思想就是控制反转，它是 Spring 框架的核心之一。</p>
<img src="/2020/05/01/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AIoC%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%9C%E7%94%A8/IoC.png" class="" title="IoC">

<p><strong>明确 ioc 的作用：</strong></p>
<p>削减计算机程序的耦合(解除我们代码中的依赖关系)。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记（三）：使用Spring的IoC解决程序耦合</title>
    <url>/2020/05/01/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8Spring%E7%9A%84IoC%E8%A7%A3%E5%86%B3%E7%A8%8B%E5%BA%8F%E8%80%A6%E5%90%88/</url>
    <content><![CDATA[<p>由于我们是使用 Spring 解决依赖关系，并不是真正的要做增删改查操作，所以此时我们没必要写实体类。并且我们在此处使用的是 java 工程，不是 java web 工程。</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="1-使用IDEA创建Maven工程并添加依赖"><a href="#1-使用IDEA创建Maven工程并添加依赖" class="headerlink" title="1. 使用IDEA创建Maven工程并添加依赖"></a>1. 使用IDEA创建Maven工程并添加依赖</h3><p>在pom.xml配置依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-创建业务层接口和实现类"><a href="#2-创建业务层接口和实现类" class="headerlink" title="2. 创建业务层接口和实现类"></a>2. 创建业务层接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务层的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟保存账户（此处只是模拟，并不是真的要保存） </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();<span class="comment">//此处的依赖关系有待解决 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//请自行生成getter和setter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存了账户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-创建持久层接口和实现类"><a href="#3-创建持久层接口和实现类" class="headerlink" title="3. 创建持久层接口和实现类"></a>3. 创建持久层接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟保存账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"保存了账户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="4-在resources目录创建配置文件bean-xml"><a href="#4-在resources目录创建配置文件bean-xml" class="headerlink" title="4. 在resources目录创建配置文件bean.xml"></a>4. 在resources目录创建配置文件bean.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"dao.impl.AccountDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-测试配置是否成功"><a href="#5-测试配置是否成功" class="headerlink" title="5. 测试配置是否成功"></a>5. 测试配置是否成功</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个表现层，用于调用业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取spring的IoC核心容器，并根据id获取对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//ApplicationContext ac = new FileSystemXmlApplicationContext("E:\\Study\\IDEA Project\\spring\\src\\main\\resources\\bean.xml");</span></span><br><span class="line">        <span class="comment">//AnnotationConfigApplicationContext</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据id获取bean对象</span></span><br><span class="line">        IAccountService as = (IAccountService)ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        IAccountDao ad = (IAccountDao) ac.getBean(<span class="string">"accountDao"</span>);</span><br><span class="line">        <span class="comment">//as.saveAccount();</span></span><br><span class="line">        System.out.println(as);</span><br><span class="line">        System.out.print(ad);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<img src="/2020/05/01/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8Spring%E7%9A%84IoC%E8%A7%A3%E5%86%B3%E7%A8%8B%E5%BA%8F%E8%80%A6%E5%90%88/result.png" class="" title="result">

<h2 id="Spring基于-XML-的-IOC-细节"><a href="#Spring基于-XML-的-IOC-细节" class="headerlink" title="Spring基于 XML 的 IOC 细节"></a>Spring基于 XML 的 IOC 细节</h2><h3 id="1-Spring-中工厂的类结构图"><a href="#1-Spring-中工厂的类结构图" class="headerlink" title="1. Spring 中工厂的类结构图"></a>1. Spring 中工厂的类结构图</h3><img src="/2020/05/01/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8Spring%E7%9A%84IoC%E8%A7%A3%E5%86%B3%E7%A8%8B%E5%BA%8F%E8%80%A6%E5%90%88/structure1.png" class="" title="structure1">

<img src="/2020/05/01/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8Spring%E7%9A%84IoC%E8%A7%A3%E5%86%B3%E7%A8%8B%E5%BA%8F%E8%80%A6%E5%90%88/structure2.png" class="" title="structure1">

<h3 id="2-BeanFactory和-ApplicationContext-的区别"><a href="#2-BeanFactory和-ApplicationContext-的区别" class="headerlink" title="2. BeanFactory和 ApplicationContext 的区别"></a>2. BeanFactory和 ApplicationContext 的区别</h3><p>BeanFactory 才是 Spring 容器中的顶层接口。 </p>
<p>ApplicationContext 是它的子接口。 </p>
<p>BeanFactory 和 ApplicationContext 的区别：<br>创建对象的时间点不一样。<br>ApplicationContext：只要一读取配置文件，默认情况下就会创建对象。   BeanFactory：什么使用什么时候创建对象。 </p>
<h3 id="3-ApplicationContext-接口的实现类"><a href="#3-ApplicationContext-接口的实现类" class="headerlink" title="3. ApplicationContext 接口的实现类"></a>3. ApplicationContext 接口的实现类</h3><p><code>ClassPathXmlApplicationContext</code>：<br> 它是从类的根路径下加载配置文件  推荐使用这种  </p>
<p><code>FileSystemXmlApplicationContext</code>：<br> 它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。 </p>
<p><code>AnnotationConfigApplicationContext</code>:<br> 当我们使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。 </p>
<h2 id="IOC-中-bean-标签和管理对象细节"><a href="#IOC-中-bean-标签和管理对象细节" class="headerlink" title="IOC 中 bean 标签和管理对象细节"></a>IOC 中 bean 标签和管理对象细节</h2><h3 id="1-bean-标签"><a href="#1-bean-标签" class="headerlink" title="1. bean 标签"></a>1. bean 标签</h3><ul>
<li><p>作用：<br>用于配置对象让 Spring 来创建的。<br>默认情况下它调用的是类中的<strong>无参构造函数</strong>。如果没有无参构造函数则不能创建成功。 </p>
</li>
<li><p>属性：<br>id：给对象在容器中提供一个唯一标识。用于获取对象。<br>class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。  scope：指定对象的作用范围。 </p>
<ul>
<li>singleton：默认值，单例的.    </li>
<li>prototype：多例的。   </li>
<li>request：WEB 项目中，Spring 创建一个 Bean 的对象,将对象存入到 request 域中。    </li>
<li>session：WEB 项目中，Spring 创建一个 Bean 的对象,将对象存入到 session 域中。    </li>
<li>global session：WEB 项目中，应用在 Portlet 环境。如果没有 Portlet 环境那么 globalSession 相当于 session。</li>
</ul>
</li>
</ul>
<h3 id="2-bean-的作用范围和生命周期"><a href="#2-bean-的作用范围和生命周期" class="headerlink" title="2. bean 的作用范围和生命周期"></a>2. bean 的作用范围和生命周期</h3><ul>
<li><p>单例对象：scope=”singleton”<br>一个应用只有一个对象的实例。它的作用范围就是整个引用。 </p>
<p>生命周期<br>对象出生：当应用加载，创建容器时，对象就被创建了。<br>对象活着：只要容器在，对象一直活着。<br>对象死亡：当应用卸载，销毁容器时，对象就被销毁了。 </p>
</li>
<li><p>多例对象：scope=”prototype”<br>每次访问对象时，都会重新创建对象实例。   </p>
<p>生命周期<br>对象出生：当使用对象时，创建新的对象实例。<br>对象活着：只要对象在使用中，就一直活着。<br>对象死亡：当对象长时间不用时，被 java 的垃圾回收器回收了</p>
</li>
</ul>
<h3 id="3-实例化-Bean-的三种方式"><a href="#3-实例化-Bean-的三种方式" class="headerlink" title="3.  实例化 Bean 的三种方式"></a>3.  实例化 Bean 的三种方式</h3><h4 id="1-使用默认无参构造函数"><a href="#1-使用默认无参构造函数" class="headerlink" title="1. 使用默认无参构造函数"></a>1. 使用默认无参构造函数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在默认情况下,它会根据默认无参构造函数来创建类对象。如果 bean 中没有默认无参构造函数，将会创建失败。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"service.impl.AccountServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-spring管理静态工厂——使用静态工厂的方法创建对象"><a href="#2-spring管理静态工厂——使用静态工厂的方法创建对象" class="headerlink" title="2. spring管理静态工厂——使用静态工厂的方法创建对象"></a>2. spring管理静态工厂——使用静态工厂的方法创建对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 模拟一个静态工厂，创建业务层实现类  </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是:   </span></span><br><span class="line"><span class="comment">    使用 StaticFactory 类中的静态方法 createAccountService 创建对象，并存入 spring 容器   </span></span><br><span class="line"><span class="comment">    id 属性：指定 bean 的 id，用于从容器中获取   </span></span><br><span class="line"><span class="comment">    class 属性：指定静态工厂的全限定类名   </span></span><br><span class="line"><span class="comment">    factory-method 属性：指定生产对象的静态方法  </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span>  <span class="attr">class</span>=<span class="string">"com.itheima.factory.StaticFactory"</span>  <span class="attr">factory-method</span>=<span class="string">"createAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-spring管理实例工厂——使用实例工厂的方法创建对象"><a href="#3-spring管理实例工厂——使用实例工厂的方法创建对象" class="headerlink" title="3. spring管理实例工厂——使用实例工厂的方法创建对象"></a>3. spring管理实例工厂——使用实例工厂的方法创建对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 模拟一个实例工厂，创建业务层实现类  </span></span><br><span class="line"><span class="comment"> * 此工厂创建对象，必须现有工厂实例对象，再调用方法  </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是：    </span></span><br><span class="line"><span class="comment">    先把工厂的创建交给 spring 来管理。   </span></span><br><span class="line"><span class="comment">    然后在使用工厂的 bean 来调用里面的方法   </span></span><br><span class="line"><span class="comment">    factory-bean 属性：用于指定实例工厂 bean 的 id。   </span></span><br><span class="line"><span class="comment">    factory-method 属性：用于指定实例工厂中创建对象的方法。 </span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instancFactory"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"instancFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Spring-的依赖注入"><a href="#Spring-的依赖注入" class="headerlink" title="Spring 的依赖注入"></a>Spring 的依赖注入</h3><p>  注入的概念  </p>
<p>  依赖注入：Dependency Injection。它是 spring 框架核心 ioc 的具体实现。 </p>
<p>  我们的程序在编写时，通过控制反转，把对象的创建交给了 spring，但是代码中不可能出现没有依赖的情况。 ioc 解耦只是降低他们的依赖关系，但不会消除。例如：我们的业务层仍会调用持久层的方法。 </p>
<p>  那这种业务层和持久层的依赖关系，在使用 spring 之后，就让 spring 来维护了。 </p>
<p>  简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</p>
<h4 id="1-构造函数注入"><a href="#1-构造函数注入" class="headerlink" title="1. 构造函数注入"></a>1. 构造函数注入</h4><p>顾名思义，就是使用类中的构造函数，给成员变量赋值。</p>
<p>注意，赋值的操作不是我们自己做的，而是通过配置的方式，让 Spring 框架来为我们注入。具体代码如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Integer age;  </span><br><span class="line">    <span class="keyword">private</span> Date birthday;     </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday &#123;   </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">this</span>.name = name;   </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">this</span>.age = age;   </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">this</span>.birthday = birthday;  </span></span></span><br><span class="line"><span class="function"><span class="params">    &#125; </span></span></span><br><span class="line"><span class="function"><span class="params"> </span></span></span><br><span class="line"><span class="function"><span class="params">@Override  </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">public</span> <span class="keyword">void</span> saveAccount()</span> </span>&#123;   </span><br><span class="line">    System.out.println(name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);   </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用构造函数的方式，给 service 中的属性传值  </span></span><br><span class="line"><span class="comment">    要求：   </span></span><br><span class="line"><span class="comment">        类中需要提供一个对应参数列表的构造函数。 </span></span><br><span class="line"><span class="comment">    涉及的标签：   </span></span><br><span class="line"><span class="comment">        constructor-arg    </span></span><br><span class="line"><span class="comment">            属性：     </span></span><br><span class="line"><span class="comment">                index:指定参数在构造函数参数列表的索引位置     </span></span><br><span class="line"><span class="comment">                type:指定参数在构造函数中的数据类型 </span></span><br><span class="line"><span class="comment">                name:指定参数在构造函数中的名称   </span></span><br><span class="line"><span class="comment">            =======上面三个都是找给谁赋值，下面两个指的是赋什么值的============== </span></span><br><span class="line"><span class="comment">            value:它能赋的值是基本数据类型和 String 类型 </span></span><br><span class="line"><span class="comment">            ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean </span></span><br><span class="line"><span class="comment"> --&gt;</span> </span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">" 张三 "</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-set-方法注入"><a href="#2-set-方法注入" class="headerlink" title="2. set 方法注入"></a>2. set 方法注入</h4><p>顾名思义，就是在类中提供需要注入成员的 set 方法。具体代码如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Integer age;  </span><br><span class="line">    <span class="keyword">private</span> Date birthday;    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;  </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span>  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">        System.out.println(name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过配置文件给 bean 中的属性传值：使用 set 方法的方式  </span></span><br><span class="line"><span class="comment">    涉及的标签：   </span></span><br><span class="line"><span class="comment">        property </span></span><br><span class="line"><span class="comment">        属性：    </span></span><br><span class="line"><span class="comment">            name：找的是类中 set 方法后面的部分    </span></span><br><span class="line"><span class="comment">            ref：给属性赋值是其他 bean 类型的    </span></span><br><span class="line"><span class="comment">            value：给属性赋值是基本数据类型和 string 类型的 </span></span><br><span class="line"><span class="comment">        实际开发中，此种方式用的较多。 </span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-使用-p-名称空间注入数据（本质还是调用-set-方法）"><a href="#3-使用-p-名称空间注入数据（本质还是调用-set-方法）" class="headerlink" title="3. 使用 p 名称空间注入数据（本质还是调用 set 方法）"></a>3. 使用 p 名称空间注入数据（本质还是调用 set 方法）</h4><p>此种方式是通过在 xml中导入 p名称空间，使用 p:propertyName 来注入数据，它的本质仍然是调用类中的 set 方法实现注入功能。 </p>
<p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 使用 p 名称空间注入，本质还是调用类中的 set 方法  </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl4</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Integer age;  </span><br><span class="line">    <span class="keyword">private</span> Date birthday;    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;  </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">        System.out.println(name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件代码：<br>注意<code>xmlns:p=&quot;http://www.springframework.org/schema/p</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans            </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span>  <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl4"</span>  <span class="attr">p:name</span>=<span class="string">"test"</span> <span class="attr">p:age</span>=<span class="string">"21"</span> <span class="attr">p:birthday-ref</span>=<span class="string">"now"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-注入集合属性"><a href="#4-注入集合属性" class="headerlink" title="4. 注入集合属性"></a>4. 注入集合属性</h4><p>顾名思义，就是给类中的集合成员传值，它用的也是set方法注入的方式，只不过变量的数据类型都是集合。我们这里介绍注入数组，List,Set,Map,Properties。</p>
<p>具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;  </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;  </span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;  </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; myMap;  </span><br><span class="line">    <span class="keyword">private</span> Properties myProps;   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.myList = myList;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps;  </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">        System.out.println(Arrays.toString(myStrs));   </span><br><span class="line">        System.out.println(myList);   </span><br><span class="line">        System.out.println(mySet);   </span><br><span class="line">        System.out.println(myMap);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dates"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"aaa"</span> <span class="attr">value</span>=<span class="string">"bbb"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"111"</span> <span class="attr">value</span>=<span class="string">"222"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testP1"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testP2"</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"dao.impl.AccountDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>参考文档：<br><a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a>  </p>
<p>笔记源码：<br><a href="https://github.com/Yastone/yastone.github.io/releases/tag/Spring" target="_blank" rel="noopener">https://github.com/Yastone/yastone.github.io/releases/tag/Spring</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记（四）：使用Spring的IoC来实现账户的CRUD</title>
    <url>/2020/05/05/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8Spring%E7%9A%84IoC%E6%9D%A5%E5%AE%9E%E7%8E%B0%E8%B4%A6%E6%88%B7%E7%9A%84CRUD/</url>
    <content><![CDATA[<h2 id="需求和技术要求"><a href="#需求和技术要求" class="headerlink" title="需求和技术要求"></a>需求和技术要求</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul>
<li>实现账户的 CRUD 操作 </li>
</ul>
<h3 id="技术要求"><a href="#技术要求" class="headerlink" title="技术要求"></a>技术要求</h3><ul>
<li><p>使用 spring 的 IoC 实现对象的管理 </p>
</li>
<li><p>使用 c3p0 数据源 </p>
</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><p>用IDEA创建Maven工程并在pom.xml文件中添加依赖</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-创建数据库和编写实体类"><a href="#2-创建数据库和编写实体类" class="headerlink" title="2. 创建数据库和编写实体类"></a>2. 创建数据库和编写实体类</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">40</span>),</span><br><span class="line">	money <span class="built_in">float</span></span><br><span class="line">)<span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'aaa'</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'bbb'</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'ccc'</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面请自行生成getter和setter以及toString方法</span></span><br></pre></td></tr></table></figure>

<h3 id="3-编写持久层代码"><a href="#3-编写持久层代码" class="headerlink" title="3. 编写持久层代码"></a>3. 编写持久层代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  账户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDao</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunner</span><span class="params">(QueryRunner runner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runner = runner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account where id = ?"</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">id</span>)</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">"insert into account(name,money) values(?,?)"</span>, account.getName(), account.getMoney());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">"update account set name = ?, money = ? where id = ?"</span>, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">"delete from account  where id = ?"</span>, id);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">getRunner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> runner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-编写业务层代码"><a href="#4-编写业务层代码" class="headerlink" title="4. 编写业务层代码"></a>4. 编写业务层代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-在resource目录创建并编写配置文件bean-xml"><a href="#5-在resource目录创建并编写配置文件bean-xml" class="headerlink" title="5. 在resource目录创建并编写配置文件bean.xml"></a>5. 在resource目录创建并编写配置文件bean.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"service.AccountService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"dao.AccountDao"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"runner"</span> <span class="attr">ref</span>=<span class="string">"runner"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring_db?characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-编写测试类"><a href="#6-编写测试类" class="headerlink" title="6. 编写测试类"></a>6. 编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="keyword">private</span> IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accountList = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span>(Account account : accountList)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = as.findAccountById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"Test"</span>);</span><br><span class="line">        account.setMoney(<span class="number">12345</span>);</span><br><span class="line">        as.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = as.findAccountById(<span class="number">4</span>);</span><br><span class="line">        account.setMoney(<span class="number">54321</span>);</span><br><span class="line">        as.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        as.deleteAccount(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>参考文档：<br><a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a>  </p>
<p>笔记源码：<br><a href="https://github.com/Yastone/yastone.github.io/releases/tag/Spring" target="_blank" rel="noopener">https://github.com/Yastone/yastone.github.io/releases/tag/Spring</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记（五）：基于注解的IoC配置</title>
    <url>/2020/05/05/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84IoC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>学习基于注解的 IoC 配置，大家脑海里首先得有一个认知，即注解配置和 xml 配置要实现的功能都是一样的，都是要降低程序间的耦合。只是配置的形式不一样。 </p>
<p>关于实际的开发中到底使用xml还是注解，每家公司有着不同的使用习惯。所以这两种配置方式我们都需要掌握。 </p>
<p>我们在学习解注解配置时，采用上一章节的案例，把 Spring 的 xml 配置内容改为使用注解逐步实现。 </p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="第一步：使用IDEA创建Maven工程并添加依赖"><a href="#第一步：使用IDEA创建Maven工程并添加依赖" class="headerlink" title="第一步：使用IDEA创建Maven工程并添加依赖"></a>第一步：使用IDEA创建Maven工程并添加依赖</h3><a id="more"></a>

<p>用IDEA创建Maven工程并在pom.xml文件中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第二步：使用-Service和-Repository-注解配置管理的资源"><a href="#第二步：使用-Service和-Repository-注解配置管理的资源" class="headerlink" title="第二步：使用@Service和@Repository 注解配置管理的资源"></a>第二步：使用<code>@Service</code>和<code>@Repository</code> 注解配置管理的资源</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(value = <span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  账户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span>(value = <span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDao</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account where id = ?"</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">id</span>)</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">"insert into account(name,money) values(?,?)"</span>, account.getName(), account.getMoney());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">"update account set name = ?, money = ? where id = ?"</span>, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">"delete from account  where id = ?"</span>, id);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">getRunner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> runner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：当我们使用注解注入时，set 方法不用写。</strong></p>
<h3 id="第一步：创建-Spring-的-xml配置文件并开启对注解的支持"><a href="#第一步：创建-Spring-的-xml配置文件并开启对注解的支持" class="headerlink" title="第一步：创建 Spring 的 xml配置文件并开启对注解的支持"></a>第一步：创建 Spring 的 xml配置文件并开启对注解的支持</h3><p>在resource目录创建并编写配置文件bean.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 告知spring框架在，读取配置文件，创建容器时，扫描注解，依据注解创建对象，并存入容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"dao, service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring_db?characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="1-用于创建对象的"><a href="#1-用于创建对象的" class="headerlink" title="1. 用于创建对象的"></a>1. 用于创建对象的</h3><p>相当于：<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></p>
<ul>
<li><p>@Component  </p>
<p>作用：spring 来管理。相当于在 xml 中配置一个 bean。  </p>
<p>属性：value：指定 bean 的 id。如果不指定 value 属性，默认 bean 的 id 是当前类的类名。首字母小写。 </p>
</li>
<li><p>@Controller  @Service  @Repository </p>
<p>他们三个注解都是针对一个的衍生注解，他们的作用及属性都是一模一样的。  </p>
<p>他们只不过是提供了更加明确的语义化。<br>@Controller：一般用于表现层的注解。<br>@Service：一般用于业务层的注解。<br>@Repository：一般用于持久层的注解。  </p>
<p>细节：如果注解中有且只有一个属性要赋值时，且名称是 value，value在赋值是可以不写。 </p>
</li>
</ul>
<h3 id="2-用于注入数据的"><a href="#2-用于注入数据的" class="headerlink" title="2. 用于注入数据的"></a>2. 用于注入数据的</h3><p>相当于：<code>&lt;property name=&quot;&quot; ref=&quot;&quot;&gt;</code> <code>&lt;property name=&quot;&quot; value=&quot;&quot;&gt;</code></p>
<ul>
<li><p>@Autowired </p>
<p>作用：自动按照类型注入。当使用注解注入属性时，set方法可以省略。它只能注入其他 bean 类型。当有多个 类型匹配时，使用要注入的对象变量名称作为 bean 的 id，在 Spring 容器查找，找到了也可以注入成功。找不到就报错。</p>
</li>
<li><p>@Qualifier </p>
<p>作用：在自动按照类型注入的基础之上，再按照 Bean 的 id 注入。它在给字段注入时不能独立使用，必须和 @Autowire 一起使用；但是给方法参数注入时，可以独立使用。 </p>
<p>属性：value：指定 bean 的 id。 </p>
</li>
<li><p>@Resource </p>
<p>作用：直接按照 Bean 的 id 注入。它也只能注入其他 bean 类型。 </p>
<p>属性：name：指定 bean 的 id。 </p>
</li>
<li><p>@Value </p>
<p>作用：注入基本数据类型和 String 类型数据。 </p>
<p>属性：value：用于指定值。 </p>
</li>
</ul>
<h3 id="3-用于改变作用范围的"><a href="#3-用于改变作用范围的" class="headerlink" title="3. 用于改变作用范围的"></a>3. 用于改变作用范围的</h3><p>相当于：<code>&lt;bean id=&quot;&quot; class=&quot;&quot; scope=&quot;&quot;&gt;</code></p>
<ul>
<li><p>@Scope </p>
<p>作用：指定 bean 的作用范围。 </p>
<p>属性：value：指定范围的值。      </p>
<p>取值：<strong>singleton</strong> <strong>prototype</strong> request session globalsession </p>
</li>
</ul>
<h3 id="4-和生命周期相关的"><a href="#4-和生命周期相关的" class="headerlink" title="4. 和生命周期相关的"></a>4. 和生命周期相关的</h3><p>相当于：<code>&lt;bean id=&quot;&quot; class=&quot;&quot; init-method=&quot;&quot; destroy-method=&quot;&quot; /&gt;</code> </p>
<ul>
<li><p>@PostConstruct </p>
<p>作用：用于指定初始化方法。</p>
</li>
<li><p>@PreDestroy<br>作用：用于指定销毁方法。 </p>
</li>
</ul>
<h3 id="关于-Spring-注解和-XML的选择问题"><a href="#关于-Spring-注解和-XML的选择问题" class="headerlink" title="关于 Spring 注解和 XML的选择问题"></a>关于 Spring 注解和 XML的选择问题</h3><ul>
<li><p>注解的优势：配置简单，维护方便（我们找到类，就相当于找到了对应的配置）。 </p>
</li>
<li><p>XML 的优势：修改时，不用改源码。不涉及重新编译和部署。 </p>
</li>
</ul>
<h2 id="Spring管理对象细节"><a href="#Spring管理对象细节" class="headerlink" title="Spring管理对象细节"></a>Spring管理对象细节</h2><p>基于注解的 Spring IoC 配置中，bean 对象的特点和基于 XML 配置是一模一样的。 </p>
<h2 id="Spring的纯注解配置"><a href="#Spring的纯注解配置" class="headerlink" title="Spring的纯注解配置"></a>Spring的纯注解配置</h2><p>写到此处，基于注解的 IoC 配置已经完成，但是大家都发现了一个问题：我们依然离不开 Spring 的 xml 配置文件，那么能不能不写这个 bean.xml，所有配置都用注解来实现呢？ 当然，我们需要明白的是，我们选择哪种配置的原则是简化开发和配置方便，而非追求某种技术。</p>
<h3 id="1-待解决的问题"><a href="#1-待解决的问题" class="headerlink" title="1. 待解决的问题"></a>1. 待解决的问题</h3><p>我们发现，之所以我们现在离不开 xml 配置文件，是因为我们有一句很关键的配置： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知spring框架在，读取配置文件，创建容器时，扫描注解，依据注解创建对象，并存入容器中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"dao, service"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果他要也能用注解配置，那么我们就离脱离 xml 文件又进了一步。</p>
<p>另外，数据源的配置也需要靠注解来实现：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring_db?characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-新注解说明"><a href="#2-新注解说明" class="headerlink" title="2. 新注解说明"></a>2. 新注解说明</h3><ul>
<li><p>@Configuration </p>
<p>作用：用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解。获取容器时需要使用 AnnotationApplicationContext(有@Configuration 注解的类.class)。 </p>
<p>属性：value:用于指定配置类的字节码 </p>
</li>
<li><p>@ComponentScan </p>
<p>作用：用于指定 spring 在初始化容器时要扫描的包。作用和在 Spring 的 xml 配置文件中的：<code>&lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;</code>是一样的。 </p>
<p>属性：basePackages：用于指定要扫描的包。和该注解中的 value 属性作用一样。 </p>
</li>
<li><p>@Bean </p>
<p>作用：该注解只能写在方法上，表明使用此方法创建一个对象，并且放入 spring 容器。 </p>
<p>属性：name：给当前@Bean 注解方法创建的对象指定一个名称(即 bean 的 id)。 </p>
</li>
<li><p>@PropertySource </p>
<p>作用：用于加载.properties 文件中的配置。例如我们配置数据源时，可以把连接数据库的信息写到 properties 配置文件中，就可以使用此注解指定 properties 配置文件的位置。 </p>
<p>属性：value[]：用于指定 properties 文件位置。如果是在类路径下，需要写上 classpath:</p>
</li>
<li><p>@Import </p>
<p>作用：用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration<br>注解。当然，写上也没问 题。 </p>
<p>属性：value[]：用于指定其他配置类的字节码。 </p>
</li>
</ul>
<h3 id="3-实际应用"><a href="#3-实际应用" class="headerlink" title="3. 实际应用"></a>3. 实际应用</h3><ol>
<li>编写jdbcConfig类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接数据库的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"runner"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ds.setDriverClass(driver);</span><br><span class="line">            ds.setJdbcUrl(url);</span><br><span class="line">            ds.setUser(username);</span><br><span class="line">            ds.setPassword(password);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写SpringConfigur类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring 的配置类，相当于 bean.xml 文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"dao"</span>, <span class="string">"service"</span>&#125;)</span><br><span class="line"><span class="meta">@Import</span>(JdbcConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@PropertySource("classpath:jdbcConfig.properties")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>编写jdbcConfig.properties配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;spring_db?characterEncoding&#x3D;utf-8</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure>
</li>
<li><p>在测试类中通过注解获取容器</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>工程结构图 </li>
</ol>
<img src="/2020/05/05/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84IoC%E9%85%8D%E7%BD%AE/structure.png" class="" title="structure">

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>参考文档：<br><a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a>  </p>
<p>笔记源码：<br><a href="https://github.com/Yastone/yastone.github.io/releases/tag/Spring" target="_blank" rel="noopener">https://github.com/Yastone/yastone.github.io/releases/tag/Spring</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记（六）：Spring整合Junit</title>
    <url>/2020/05/05/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASpring%E6%95%B4%E5%90%88Junit/</url>
    <content><![CDATA[<h2 id="测试类中的问题和解决思路"><a href="#测试类中的问题和解决思路" class="headerlink" title="测试类中的问题和解决思路"></a>测试类中的问题和解决思路</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在测试类中，每个测试方法都有以下两行代码： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);  </span><br><span class="line">IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="解决思路分析"><a href="#解决思路分析" class="headerlink" title="解决思路分析"></a>解决思路分析</h3><p>针对上述问题，我们需要的是程序能自动帮我们创建容器。一旦程序能自动为我们创建 Spring 容器，我们就无须手动创建了，问题也就解决了。 </p>
<p>我们都知道junit 单元测试的原理，但显然，junit 是无法实现的，因为它自己都无法知晓我们是否使用了 Spring 框架，更不用说帮我们创建 Spring 容器了。不过好在，junit 给我们暴露 了一个注解，可以让我们替换掉它的运行器。 </p>
<p>这时，我们需要依靠 Spring 框架，因为它提供了一个运行器，可以读取配置文件（或注解）来创建容器。我们只需要告诉它配置文件在哪就行了。</p>
<a id="more"></a>

<h3 id="第一步：使用IDEA创建Maven工程并添加依赖"><a href="#第一步：使用IDEA创建Maven工程并添加依赖" class="headerlink" title="第一步：使用IDEA创建Maven工程并添加依赖"></a>第一步：使用IDEA创建Maven工程并添加依赖</h3><!-- more -->

<p>用IDEA创建Maven工程并在pom.xml文件中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第二步：使用-RunWith-注解替换原有运行器"><a href="#第二步：使用-RunWith-注解替换原有运行器" class="headerlink" title="第二步：使用@RunWith 注解替换原有运行器"></a>第二步：使用@RunWith 注解替换原有运行器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三步：使用-ContextConfiguration-指定-Spring-配置文件的位置"><a href="#第三步：使用-ContextConfiguration-指定-Spring-配置文件的位置" class="headerlink" title="第三步：使用@ContextConfiguration 指定 Spring 配置文件的位置"></a>第三步：使用@ContextConfiguration 指定 Spring 配置文件的位置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>= &#123;<span class="string">"classpath:bean.xml"</span>&#125;) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四步：使用-Autowired-给测试类中的变量注入数据"><a href="#第四步：使用-Autowired-给测试类中的变量注入数据" class="headerlink" title="第四步：使用@Autowired 给测试类中的变量注入数据"></a>第四步：使用@Autowired 给测试类中的变量注入数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>= &#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="为什么不把测试类配到-xml-中"><a href="#为什么不把测试类配到-xml-中" class="headerlink" title="为什么不把测试类配到 xml 中"></a>为什么不把测试类配到 xml 中</h2><p>在解释这个问题之前，先考虑另一个问题，配到 XML 中能不能用呢？ 答案是肯定的，没问题，可以使用。 那么为什么不采用配置到 xml 中的方式呢？ </p>
<p>这个原因是这样的： </p>
<ul>
<li><p>第一：当我们在 xml 中配置了一个 bean，Spring 加载配置文件创建容器时，就会创建对象。</p>
</li>
<li><p>第二：测试类只是我们在测试功能时使用，而在项目中它并不参与程序逻辑，也不会解决需求上的问题，所以创建完了，并没有使用。那么存在容器中就会造成资源的浪费。 </p>
</li>
</ul>
<p>所以，基于以上两点，我们不应该把测试配置到 xml 文件中。 </p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>参考文档：<br><a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a>  </p>
<p>笔记源码：<br><a href="https://github.com/Yastone/yastone.github.io/releases/tag/Spring" target="_blank" rel="noopener">https://github.com/Yastone/yastone.github.io/releases/tag/Spring</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
